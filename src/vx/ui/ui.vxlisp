(package vx/ui/ui
 :libs (lib coll  :path vx/collection)
       (lib event :path vx/event)
       (lib file  :path vx/data/file)
       (lib state :path vx/state)
       (lib type  :path vx/type)
 :doc "Universal Ui Element")

(type align : struct
 :doc "Universal Alignment")

(type bounds : struct
 :properties [left   : int
              right  : int
              top    : int
              bottom : int]
 :doc "Universal Bounds")

(type cursor : struct
 :doc "Univeral Cursor Type")

(type flip : struct
 :doc "Universal ui flip horizontal or vertical or both.")

(type font : struct
 :properties [name      : string
              fontface  : fontface
              fontsize  : int
              fontstyle : fontstyle]
 :doc "Univeral Font Type")

(type fontface : struct
 :properties [name     : string
              weight   : string
              unicode  : string
              filelist : file/filelist]
 :doc "Univeral Font Face Type")

(type fontfacelist : list
 :allowtypes [fontface]
 :doc "List of fontface")

(type fontfacemap : map
 :allowtypes [fontface]
 :doc "Map of fontface")

(type fontmap : map
 :allowtypes [font]
 :doc "Map of font")

(type fontstyle : struct
 :properties [name : string]
 :doc "Univeral Font Style Type")

(type fontstylemap : map
 :allowtypes [fontstyle]
 :doc "Map of fontstyle")

(type image : struct
 :properties [name  : string
              label : string
              file  : file/file]
 :doc "Univeral Image Type")

(type layout : struct
 :properties [name      : string
              fn-layout : ui-layout<-ui-orig-parent]
 :doc "Universal Layout")

(type layoutengine : struct
 :properties [name : string
              boolean-print : boolean-print
              boolean-layoutremove   : boolean-layoutremove<-ui
              boolean-layoutselected : boolean-layoutselected<-ui
              boolean-layoutvisible  : boolean-layoutvisible<-ui
              layoutmap  : layoutmap
              layoutelse : layout
              stylesheetrender : stylesheet-render]
 :doc "Pluggable layoutengine")

(type layoutlist : list
 :allowtypes [layout]
 :doc "Map of layout")

(type layoutmap : map
 :allowtypes [layout]
 :doc "Map of layout")

(type pin : struct
 :properties [name : string]
 :doc "Pin an element")

(type point : struct
 :properties [x : int
              y : int
              z : int
              t : int
              i : int
              pointtype : pointtype]
 :doc "Universal Point")

(type pointtype : int
 :doc "Universal Point Scale")

(type style : struct
 :properties [name           : string
              align          : align
              boundsmargin   : bounds
              boundspadding  : bounds
              color-bkg      : string
              color-bkghover : string
              color-border   : string
              color-font     : string
              cursor         : cursor
              flip           : flip
              font           : font
              hidden         : boolean
              image-bkg      : image
              layout         : layout
              type           : styletype
              pin            : pin
              pointorigin    : point
              pointpos       : point
              pointrotate    : point
              pointsize      : point
              scroll-x       : boolean
              scroll-y       : boolean]
 :doc "Universal Style")

(type stylelist : list
 :allowtypes [style]
 :doc "Universal Stylelist")

(type stylemap : map
 :allowtypes [style]
 :doc "Universal Stylemap")

(type stylesheet : struct
 :properties [fontfacemap : fontfacemap
              stylemap    : stylemap]
 :doc "Universal Stylesheet")

(type styletype : struct
 :doc "Universal Style Type")

(type ui : struct
 :properties [uid         : string
              name        : string
              layout      : layout
              path        : string
              hidden      : boolean
              selected    : boolean
              selectmulti : boolean
              style       : style
              stylelist   : stylelist
              eventmap    : event/eventmap
              data        : any
              uimap       : uimap]
 :doc "Universal UI Element")

(type uilist : list
 :allowtypes [ui]
 :doc "List of ui")

(type uimap : map
 :allowtypes [ui]
 :mutable
 :doc "Map of ui")

(type uiengine : struct
 :properties [parentmap    : uimap
              layoutengine : layoutengine
              stylesheet   : stylesheet
              ui           : ui]
 :doc "Template for uiengine")

(type cursor-pointer : cursor)

(const align-center : align
 :doc "Logical Center Align in parent")

(const align-left : align
 :doc "Logical Left Align in parent")

(const align-right : align
 :doc "Logical Right Align in parent")

(const flip-x : align
 :doc "Logical Flip Horizontally")

(const flip-y : align
 :doc "Logical Flip Vertically")

(const flip-xy : align
 :doc "Logical Flip Vertically and Horizontally")

(const layout-app : layout
 (layout
  :name "layout-app"))

(const layout-background : layout
 (layout
  :name "layout-background"))

(const layout-button : layout
 (layout
  :name "layout-button"))

(const layout-combobox : layout
 (layout
  :name "layout-combobox"))

(const layout-else : layout
 (layout
  :name "layout-else"))

(const layout-flow-columns : layout
 (layout
  :name "layout-flow-columns"))

(const layout-flow-item : layout
 (layout
  :name "layout-flow-item"))

(const layout-flow-rows : layout
 (layout
  :name "layout-flow-rows"))

(const layout-image : layout
 (layout
  :name "layout-image"))

(const layout-label : layout
 (layout
  :name "layout-label"))

(const layout-main : layout
 (layout
  :name "layout-main"))

(const layout-maxpanel : layout
 (layout
  :name "layout-maxpanel"))

(const layout-menubar : layout
 (layout
  :name "layout-menubar"))

(const layout-menudrawer : layout
 (layout
  :name "layout-menudrawer"))

(const layout-msgbox : layout
 (layout
  :name "layout-msgbox"))

(const layout-navbar : layout
 (layout
  :name "layout-navbar"))

(const layout-navdrawer : layout
 (layout
  :name "layout-navdrawer"))

(const layout-panel : layout
 (layout
  :name "layout-panel"))

(const layout-parallax : layout
 (layout
  :name "layout-parallax"))

(const layout-statusbar : layout
 (layout
  :name "layout-statusbar"))

(const layout-statusdrawer : layout
 (layout
  :name "layout-statusdrawer"))

(const layout-text : layout
 (layout
  :name "layout-text"))

(const layout-textentry : layout
 (layout
  :name "layout-textentry"))

(const layout-titlebar : layout
 (layout
  :name "layout-titlebar"))

(const pin-bottom : pin)

(const pin-center : pin)

(const pin-center-h : pin)

(const pin-center-v : pin)

(const pin-expand : pin)

(const pin-left : pin)

(const pin-right : pin)

(const pin-top : pin)

(const point-center : point)

(const point-lefttop : point)

(const point-rightbottom : point)

(const pointtype-absolute : pointtype)

(const pointtype-relative : pointtype)

(const pointtype-percent : pointtype)

(const styletype-custom : styletype)

(const styletype-shared : styletype)

(const styletype-system : styletype)

(func boolean-layout<-ui-parent-selected : boolean
 [ui       : ui
  parent   : ui
  selected : boolean]
 (let : boolean
  [layoutengine : layoutengine :=
    (layoutengine-readstate)
   uiselected : ui :=
    (copy ui
     :selected selected)
   iswrite : boolean :=
    (boolean-write<-ui-parent
     uiselected parent)
   fn-layoutselected : boolean-layoutselected<-ui :=
    (:boolean-layoutselected layoutengine)]
  (fn-layoutselected uiselected))
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the selected class.")

(func boolean-layout<-ui-parent-visible : boolean
 [ui      : ui
  parent  : ui
  visible : boolean]
 (let : boolean
  [layoutengine : layoutengine :=
    (layoutengine-readstate)
   uivisible : ui :=
    (copy ui
     :hidden (! visible))
   iswrite : boolean :=
    (boolean-write<-ui-parent
     uivisible parent)
   fn-layoutvisible : boolean-layoutvisible<-ui :=
    (:boolean-layoutvisible layoutengine)]
  (fn-layoutvisible uivisible))
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the hidden class.")

(func boolean-layoutaddchild<-ui-parent : boolean
 [uiarg  : ui
  parent : ui]
 (let : boolean
  [ui2 : ui :=
    (ui-addlayout<-ui uiarg)
   iswrite : boolean :=
    (boolean-write<-ui-parent
     ui2 parent)
   ui3 : ui :=
    (ui-layout<-ui-orig-parent
     ui2 (empty ui) parent)]
   iswrite)
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes a new ui on an existing parent.")

(func boolean-layoutremove<-ui : boolean
 [ui : ui]
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Removes html node with a given ui.")

(func boolean-layoutremove<-ui-parent : boolean
 [ui     : ui
  parent : ui]
 (let : boolean
  [layoutengine : layoutengine :=
    (layoutengine-readstate)
   uid : string := (:uid ui)
   iswrite : boolean :=
    (boolean-writeremove<-ui-uid : boolean
     parent uid)
   fn-layoutremove : boolean-layoutremove<-ui :=
    (:boolean-layoutremove layoutengine)]
  (fn-layoutremove ui))
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Removes an html node given a ui.")

(func boolean-layoutremove<-ui-keys : boolean
 [ui   : ui
  keys : stringlist]
 (let : boolean
  [uimap : uimap := (:uimap ui)
   writelist : booleanlist :=
    (list<-list : booleanlist
     keys
     (fn : boolean
      [key : string]
      (let : boolean
       [childui : ui :=
        (any<-map : ui
         uimap key)]
       (boolean-layoutremove<-ui-parent
        childui ui))))]
  (and writelist))
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the selected class.")

(func boolean-layoutremove<-ui-start-end : boolean
 [ui    : ui
  start : int
  end   : int]
 (let : boolean
  [uimap : uimap := (:uimap ui)
   keys : stringlist :=
    (stringlist<-map uimap)
   subkeys : stringlist :=
    (list<-list-start-end : stringlist
     keys start end)]
  (boolean-layoutremove<-ui-keys
   ui subkeys))
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the selected class.")

(func boolean-layoutselected<-ui : boolean
 [ui : ui]
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the selected class.")

(func boolean-layoutselected<-ui-parent : boolean
 [ui     : ui
  parent : ui]
 (let : boolean
  [layoutengine : layoutengine :=
    (layoutengine-readstate)
   iswrite : boolean :=
    (boolean-write<-ui-parent
     ui parent)
   fn-layoutselected : boolean-layoutselected<-ui :=
    (:boolean-layoutselected layoutengine)]
  (fn-layoutselected ui))
 :context
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the selected class.")

(func boolean-layoutselected<-ui-selected : boolean
 [ui       : ui
  selected : int]
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the selected class.")

(func boolean-layoutvisible<-ui : boolean
 [ui : ui]
 :sideeffects "Changes HTML class element."
 :clientserver :client
 :doc "Writes to an html node adding or removing the hidden class.")

(func boolean-print : boolean
 [ui : ui]
 (let : boolean
  [layoutengine : layoutengine :=
    (layoutengine-readstate)
   fn-print : boolean-print :=
    (:boolean-print layoutengine)]
  (fn-print ui))
 :context
 :doc "Create a print ready version of ui")

(func boolean-removestate-uiapp : boolean
 (state/boolean-removestate<-name
  :uiapp)
 :context
 :doc "Returns true if uiapp was successfully removed from state.")

(func boolean-write<-ui-parent : boolean
 [ui     : ui
  parent : ui]
 (let
  [uid : string := (:uid ui)
   uimap : uimap := (:uimap parent)]
  (boolean-write<-map-name-value
   uimap uid ui))
 :doc "Returns true if the given ui was added to parent uimap")

(func boolean-writeremove<-ui-uid : boolean
 [uiarg : ui
  uid   : string]
 (let
  [uimap : uimap := (:uimap uiarg)]
  (boolean-write<-map-name-value
   uimap uid (empty ui)))
 :doc "Returns true if the given uid was removed from ui uimap")

(func boolean-writestate<-ui : boolean
 [ui : ui]
 (let : boolean
  [uid : string := (:uid ui)
   uiapp : ui := (ui-readstate-uiapp)
   parentuid : string :=
    (string-parentuid<-uid uid)
   parentui : ui :=
    (if : ui
     (then
      (= "" parentuid)
      uiapp)
     (else
      (ui<-ui-find
       uiapp
       parentuid)))
   isfound : boolean :=
    (!-empty parentui)
   iswrite : boolean :=
    (if
     (then isfound
      (boolean-write<-ui-parent
       ui parentui)))]
  isfound)
 :context
 :doc "")

(func boolean-writestate<-uiapp : boolean
 [ui : ui]
 (state/boolean-writestate<-name-value
  :uiapp
  ui)
 :test (test
        (ui :uid "app")
        (let : ui
         [iswrite : boolean :=
           (boolean-writestate<-uiapp
            (ui :uid "app"))
          appui : ui :=
           (ui-readstate-uiapp)
          isremoved : boolean :=
           (boolean-removestate-uiapp)]
         appui))
 :context
 :doc "Returns true if successful write to :uiapp state")

(func boolean-writestate<-uiengine : boolean
 [uiengine : uiengine]
 (state/boolean-writestate<-name-value
  :uiengine uiengine)
 :context
 :sideeffects "Changes state"
 :doc "Writes the uiengine to state")

(func fontfacemap<-fontfacelist : fontfacemap
 [fontfacelist : fontfacelist]
 (map<-list : fontfacemap
  fontfacelist
  (fn : string
   [fontface : fontface]
   (:name fontface)))
 :doc "Returns a fontfacemap from a fontfacelist")

(func int-child<-ui-uid : int
 [ui  : ui
  uid : string]
 (let : int
  [uimap : uimap := (:uimap ui)]
  (coll/int<-map-key
   uimap uid))
 :doc "Returns the position of the currently selected subui")

(func int-selected<-ui : int
 [ui : ui]
 (let : int
  [uid : string :=
    (string-selected<-ui ui)
   uidlist : stringlist :=
    (stringlist<-ui ui)]
  (coll/int<-stringlist-find
   uidlist
   uid))
 :doc "Returns the position of the currently selected subui")

(func int-visible<-ui : int
 [ui : ui]
 (let : int
  [intlist : intlist :=
    (intlist-visible<-ui ui)]
  (first<-list intlist))
 :doc "Returns the position of the currently visible subui")

(func intlist-visible<-ui : intlist
 [uiarg : ui]
 (let : intlist
  [uimap : uimap  := (:uimap uiarg)
   uilist : uilist :=
    (uilist<-uimap
     uimap)
   intlist : uilist :=
    (list<-list-intany : uilist
     uilist
     (fn : int
      [pos   : int
       subui : ui]
      (if : int
       (then
        (! (:hidden subui))
        pos))))]
   (list<-list-filter : intlist
    intlist
    (fn : int
     [pos : int]
     pos)))
 :doc "Return a uilist of the ui with selected=true")

(func layout<-style : layout
 [style : style]
 (:layout style)
 :doc "")

(func layout<-ui : layout
 [ui : ui]
 (let : layout
  [layoutengine : layoutengine := (layoutengine-readstate)]
  (layout<-ui-layoutengine
   ui
   layoutengine))
 :context
 :doc "Returns the layout from layoutengine that matches the ui")

(func layout<-ui-layoutengine : layout
 [ui           : ui
  layoutengine : layoutengine]
 (let : layout
  [layoutmap  : layoutmap := (:layoutmap  layoutengine)
   layoutelse : layout    := (:layoutelse layoutengine)]
  (layout<-ui-layoutmap-else
   ui layoutmap layoutelse))
 :doc "Returns the layout from layoutengine that matches the ui")

(func layout<-ui-layoutmap-else : layout
 [ui         : ui
  layoutmap  : layoutmap
  layoutelse : layout]
 (let : layout
  [style   : style  := (:style ui)
   layout  : layout :=
    (layout<-style style)
   layname : string := (:name layout)
   layout1 : layout :=
    (any<-map : layout
     layoutmap layname)
   layout2 : layout :=
    (if : layout
     (!-empty layout1)
     layout1
     layoutelse)]
  layout2)
 :doc "Returns a layout from a given ui, layoutmap, and layoutelse")

(func layoutengine-readstate : layoutengine
 (let : layoutengine
  [uiengine : uiengine := (uiengine-readstate)]
  (:layoutengine uiengine))
 :context
 :doc "Returns the current layoutengine from state")

(func layoutmap<-layoutlist : layoutmap
 [layoutlist : layoutlist]
 (map<-list : layoutmap
  layoutlist
  (fn : string
   [layout : layout]
   (:name layout)))
 :doc "Returns an layoutmap from an layoutlist")

(func string-parentuid<-uid : string
 [uid : string]
 (let : string
  [lastpos : int :=
   (type/int<-string-findlast
    uid "/")]
  (if : string
   (then
    (> lastpos 0)
    (type/string<-string-end
     uid (- lastpos 1)))))
 :test (test
        ""
        (string-parentuid<-uid
         "a"))
       (test
        "a/b"
        (string-parentuid<-uid
         "a/b/c"))
 :doc "Returns the parent uid of a given uid")

(func string-selected<-ui : string
 [ui : ui]
 (let : string
  [selectedui : ui :=
    (ui-selected<-ui ui)]
  (:uid selectedui))
 :doc "Return the uid of the ui with selected=true")

(func stringlist<-ui : stringlist
 [ui : ui]
 (let : stringlist
  [uimap  : uimap  := (:uimap ui)]
  (stringlist<-map
   uimap))
 :doc "Return a list of uid of the ui")

(func stringlist-selected<-ui : stringlist
 [ui : ui]
 (let : stringlist
  [uimap  : uimap  := (:uimap ui)
   uilist : uilist := (uilist<-uimap
                       uimap)]
  (list<-list : stringlist
   uilist
   (fn : string
    [item : ui]
    (if : string
     (:selected item)
     (:uid item)
     ""))))
 :doc "Return a list of uid of the ui with selected=true")

(func stylemap<-stylelist : stylemap
 [stylelist : stylelist]
 (map<-list
  stylelist
  (fn : string
   [style : style]
   (:name style)))
 :doc "")

(func stylesheet-readstate : stylesheet
 (let : stylesheet
  [uiengine : uiengine := (uiengine-readstate)]
  (:stylesheet uiengine))
 :context
 :doc "Returns the current uiengine from state")

(func stylesheet-render : stylesheet
 [stylesheetui : stylesheet]
 :sideeffects "Stylesheet will be rendered"
 :doc "Template for rendering stylesheet")

(func ui<-layout-ui-orig-parent : ui
 [layout : layout
  uiarg  : ui
  uiorig : ui
  parent : ui]
 (let : ui
  [name : string := (:name layout)
   fn-layout : ui-layout<-ui-orig-parent :=
    (:fn-layout layout)
   uichg : ui :=
    (fn-layout
     uiarg
     uiorig
     parent)]
  uichg)
 :doc "")

(func ui<-ui-find : ui
 [uiarg : ui
  find  : string]
 (let : ui
  [uid : string := (:uid uiarg)]
  (if : ui
   (then (= uid "") (empty ui))
   (then (= uid find) uiarg)
   (then
    (boolean<-string-starts
     find
     (string uid "/"))
    (let : ui
     [afterpos : int :=
       (+ (length uid) 2)
      after : string :=
       (type/string<-string-start
        find afterpos)
      pos : int :=
       (type/int<-string-find after "/")
      subpart : string :=
       (if : string
        (then
         (> pos 0)
         (type/string<-string-end
          after (- pos 1)))
        (else after))
      subfind : string :=
       (if : string
        (then
         (!-empty subpart)
         (string uid "/" subpart)))]
     (if : ui
      (then
       (!-empty subfind)
       (let : ui
        [uimap : uimap :=
          (:uimap uiarg)
         subui : ui :=
          (any<-map uimap subfind)]
        (ui<-ui-find subui find))))))))
 :test (test
        (ui
         :uid "a/b/c")
        (ui<-ui-find
         (ui
          :uid "a"
          :uimap
           (uimap
            :a/b
             (ui
              :uid "a/b"
              :uimap
               (uimap
                :a/b/c
                 (ui
                  :uid "a/b/c")))))
         "a/b/c"))
 :doc "Returns a ui given a ui and a find uid.")

(func ui<-ui-selected : ui
 [ui       : ui
  selected : int]
 (if : ui
  (then
   (< selected 1)
   ui)
  (else
   (let : ui
    [uimap : uimap := (:uimap ui)
     uilist1 : uilist :=
      (uilist<-uimap uimap)
     uilist2 : uilist :=
      (list<-list-intany
       uilist1
       (fn : ui
        [posval : int
         uival  : ui]
        (if : ui
         (then
          (= posval selected)
          (copy uival
           :selected true))
         (else
          (copy uival
           :selected false)))))
     childmap : uimap :=
      (uimap<-uilist uilist2)]
    (copy ui
     :uimap childmap))))
 :test (test
        (ui
         :uimap
          (uimap
           :a
            (ui
             :uid "a")
           :b
            (ui
             :uid "b"
             :selected true)))
        (ui<-ui-selected
         (ui
          :uimap
           (uimap
            :a
             (ui
              :uid "a"
              :selected true)
            :b
             (ui
              :uid "b")))
         2))
 :doc "Return a ui after changing selected only one child.")

(func ui-addlayout<-ui : ui
 [ui : ui]
 (let : ui
  [uiengine : uiengine := (uiengine-readstate)]
  (ui-addlayout<-ui-uiengine
   ui uiengine))
 :context
 :doc "Returns a ui with a layout added to each ui.")

(func ui-addlayout<-ui-layoutengine : ui
 [ui           : ui
  layoutengine : layoutengine]
 (let : ui
  [layoutmap  : layoutmap := (:layoutmap  layoutengine)
   layoutelse : layout    := (:layoutelse layoutengine)]
  (ui-addlayout<-ui-layoutmap-else
   ui
   layoutmap
   layoutelse))
 :doc "Returns a ui with a layout added to each ui.")

(func ui-addlayout<-ui-layoutmap-else : ui
 [ui : ui
  layoutmap  : layoutmap
  layoutelse : layout]
 (let : ui
  [uimap : uimap := (:uimap ui)
   layout1 : layout :=
    (layout<-ui-layoutmap-else
     ui
     layoutmap
     layoutelse)
   uimap2 : uimap :=
    (uimap-addlayout<-uimap-layoutmap-else
     uimap
     layoutmap
     layoutelse)]
  (copy ui
   :layout layout1
   :uimap  uimap2))
 :doc "Returns a ui with a layout added to each ui.")

(func ui-addlayout<-ui-uiengine : ui
 [ui       : ui
  uiengine : uiengine]
 (let : ui
  [layoutengine : layoutengine :=
   (:layoutengine uiengine)]
  (ui-addlayout<-ui-layoutengine
   ui
   layoutengine))
 :doc "Returns a ui with a layout added to each ui.")

(func ui-child<-ui-pos : ui
 [ui  : ui
  pos : int]
 (let : ui
  [childmap : uimap := (:uimap ui)]
  (any<-map-pos : ui
   childmap pos))
 :doc "Returns then named child from a ui.")

(func ui-child<-ui-uid : ui
 [ui  : ui
  uid : string]
 (let : ui
  [childmap : uimap := (:uimap ui)]
  (any<-map : ui
   childmap uid))
 :doc "Returns then named child from a ui.")

(func ui-from<-event : ui
 [evt : event/event]
 (let : ui
  [uid : string := (:from evt)]
  (ui-readstate<-uid uid))
 :context
 :doc "Returns (:from evt) cast as ui")

(func ui-layout : ui
 [uiarg : ui]
 (ui-layout<-ui-orig-parent
  uiarg
  (empty ui)
  (empty ui))
 :doc "")

(func ui-layout<-fn-layout-ui-orig-parent : ui
 [fn-layout : ui-layout<-ui-orig-parent
  ui        : ui
  orig      : ui
  parent    : ui]
 (fn-layout
  ui
  orig
  parent)
 :doc "Returns a rendered ui")

(func ui-layout<-ui-orig-parent : ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (if : ui
  (then
   (== ui orig)
   orig)
  (else
   (let : ui
    [uimap  : uimap  := (:uimap  ui)
     layout : layout := (:layout ui)
     uiout  : ui :=
      (ui<-layout-ui-orig-parent
       layout ui orig parent)]
    uiout)))
 :sideeffects "Alters UI"
 :doc "Returns a rendered object from a UI Element.")

(func ui-layout<-ui-parent-selected : ui
 [ui       : ui
  parent   : ui
  selected : int]
 (let : ui
  [uichg1 : ui :=
    (ui<-ui-selected
     ui selected)
   iswrite : boolean :=
    (boolean-write<-ui-parent
     uichg1 parent)]
  (ui-layout<-ui-orig-parent
   uichg1 ui parent))
 :doc "Return a ui after changing selected item and rendering it.")

(func ui-layout<-ui-parent-visible : ui
 [ui      : ui
  parent  : ui
  visible : int]
 (let : ui
  [uichg : ui :=
    (ui-write<-ui-visible
     ui visible)]
  (ui-layout<-ui-orig-parent
   uichg ui parent))
 :doc "Return a ui after changing visible item and rendering it.")

(func ui-readstate<-uid : ui
 [uid : string]
 (let : ui
  [uiapp : ui := (ui-readstate-uiapp)]
  (ui<-ui-find
   uiapp
   uid))
 :test (test
        (ui
         :uid "a/b/c")
        (let : ui
         [uiapp : ui :=
           (ui
            :uid "a"
            :uimap
             (uimap<-uilist
              (ui
               :uid "a/b"
               :uimap
                (uimap<-uilist
                 (ui
                  :uid "a/b/c")))))
          iswrite : boolean :=
           (boolean-writestate<-uiapp uiapp)
          readval : ui :=
           (ui-readstate<-uid
            "a/b/c")
          isremoved : boolean := (boolean-removestate-uiapp)]
         readval))
 :context
 :doc "Returns the named ui from state")

(func ui-readstate-uiapp : ui
 (state/any-readstate<-name :uiapp)
 :test (test
        (ui
         :uid "myapp")
        (let : ui
         [iswrite : boolean :=
           (boolean-writestate<-uiapp
            (ui
             :uid "myapp"))]
         (ui-readstate-uiapp)))
 :context
 :doc "Returns the top level uiapp from state")

(func ui-selected<-ui : ui
 [ui : ui]
 (let : ui
  [uilist : uilist := (uilist-selected<-ui ui)]
  (first<-list : ui
   uilist))
 :doc "Returns the first child of ui with selected=true")

(func ui-visible<-ui : ui
 [ui : ui]
 (let : ui
  [uilist : uilist := (uilist-visible<-ui ui)]
  (first<-list : ui
   uilist))
 :doc "Returns the first child of ui with hidden=false")

(func ui-write<-ui-visible : ui
 [ui      : ui
  visible : int]
 (if : ui
  (then
   (< visible 1)
   ui)
  (else
   (let : ui
    [uimap : uimap := (:uimap ui)
     uilist1 : uilist :=
      (uilist<-uimap uimap)
     uilist2 : uilist :=
      (list<-list-intany : uilist
       uilist1
       (fn : ui
        [posval : int
         uival  : ui]
        (if : ui
         (then
          (= posval visible)
          (ui-write<-ui-child
           ui
           (copy uival
            :hidden false)))
         (else
          (ui-write<-ui-child
           ui
           (copy uival
            :hidden true))))))]
    ui)))
 :test (test
        (ui
         :uimap
          (uimap
           :a
            (ui
             :uid "a"
             :hidden true)
           :b
            (ui
             :uid "b")))
        (ui-write<-ui-visible
         (ui
          :uimap
           (uimap
            :a
             (ui
              :uid "a")
            :b
             (ui
              :uid "b"
              :hidden true)))
         2))
 :doc "Return a ui after changing hidden to all but one child.")

(func ui-write<-ui-child : ui
 [ui    : ui
  child : ui]
 (let
  [childid : string := (:uid   child)
   uimap : uimap := (:uimap ui)
   write : boolean :=
    (boolean-write<-map-name-value
     uimap childid child)]
  ui)
 :doc "Returns the given ui with the child added to uimap")

(func ui-write<-ui-childmap : ui
 [ui       : ui
  childmap : uimap]
 (let : ui
  [workmap : uimap :=
   (map<-map : uimap
    childmap
    (fn : ui
     [key   : string
      value : ui]
     (ui-write<-ui-child
      ui
      value)))]
  ui)
 :doc "Returns the given ui with the members of childmap added to uimap")

(func uid-selected<-ui : string
 [ui : ui]
 (let : string
  [uidlist : stringlist := (stringlist-selected<-ui ui)]
  (first<-list : string
   uidlist))
 :doc "Returns the uid of the first ui with selected=true")

(func uiengine-readstate : uiengine
 (state/any-readstate<-name : uiengine
  :uiengine)
 :context
 :doc "Returns the current uiengine from state")

(func uiengine-render : uiengine
 [uiengine : uiengine]
 (let : uiengine
  [stylesheet : stylesheet :=
    (:stylesheet uiengine)
   ui : ui := (:ui uiengine)
   layoutengine : layoutengine :=
    (:layoutengine uiengine)
   issetstate : boolean :=
    (boolean-writestate<-uiengine
     uiengine)
   stylesheetrender : stylesheet-render :=
    (:stylesheetrender layoutengine)
   stylesheetrend : stylesheet :=
    (stylesheetrender stylesheet)
   uiaddlayout : ui :=
    (ui-addlayout<-ui-layoutengine
     ui layoutengine)
   isuiwrite : boolean :=
    (boolean-writestate<-uiapp
     uiaddlayout)
   uirendered : ui :=
    (ui-layout uiaddlayout)]
  (copy uiengine
   :ui uirendered))
 :context
 :doc "Returns a fully rendered ui for a given engine.")

(func uilist<-uimap : uilist
 [uimap : uimap]
 (list<-map : uilist
  uimap
  (fn : ui
   [key  : string
    item : ui]
   item))
 :doc "")

(func uilist-selected<-ui : uilist
 [uiarg : ui]
 (let : uilist
  [uimap  : uimap  := (:uimap uiarg)
   uilist : uilist :=
    (uilist<-uimap
     uimap)]
  (coll/list<-list-filter : uilist
   uilist
   (fn : ui
    [item : ui]
    (if : ui
     (:selected item)
     item))))
 :doc "Return a uilist of the ui with selected=true")

(func uilist-visible<-ui : uilist
 [uiarg : ui]
 (let : uilist
  [uimap  : uimap  := (:uimap uiarg)
   uilist : uilist :=
    (uilist<-uimap
     uimap)]
  (coll/list<-list-filter : uilist
   uilist
   (fn : ui
    [item : ui]
    (if : ui
     (! (:hidden item))
     item))))
 :doc "Return a uilist of the ui with hidden=false")

(func uimap<-uilist : uimap
 [uilist : uilist :...]
 (map<-list : uimap
  uilist
  (fn : string
   [ui : ui]
   (:uid ui)))
 :doc "")

(func uimap<-uimap-data : uimap
 [uimap : uimap
  data  : any]
 :doc "Template for creating uimap dynamically")

(func uimap-addlayout<-uimap-layoutmap-else : uimap
 [uimap : uimap
  layoutmap  : layoutmap
  layoutelse : layout]
 (map<-map : uimap
  uimap
  (fn : ui
   [key : string
    ui  : ui]
   (ui-addlayout<-ui-layoutmap-else
    ui
    layoutmap
    layoutelse)))
 :doc "Returns a uimap with a layout added to each ui.")

(func uimap-layout<-uimap-parent : uimap
 [uimap  : uimap
  parent : ui]
 (map<-map : uimap
  uimap
  (fn : ui
   [key   : string
    value : ui]
   (ui-layout<-ui-orig-parent
    value
    (empty ui)
    parent)))
 :sideeffects "Alters User Interface"
 :doc "Renders a uimap and returns a rendered uimap.")
