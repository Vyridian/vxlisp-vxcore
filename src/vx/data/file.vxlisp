(package vx/data/file
 :libs (lib tb  :path vx/data/textblock)
       (lib typ :path vx/type)
       (lib javaniofile)
 :doc "File handler")

(type file : struct
 :properties
  [name       : string
   format     : fileformat
   path       : string
   permission : permission
   text       : string]
 :doc "File structure")

(type filelist : list
 :allowtypes [file]
 :doc "List of file")

(type fileformat : string
 :allowvalues [:binary
               :text])

(func boolean-exists<-file : boolean
 [file : file]
 (native
  :cpp
   "output = vx_data_file::vx_boolean_exists_from_file(file);"
  :csharp :auto
  :java
   "Core.Type_string fullpath = File.f_pathfull_from_file(file);
    String sfullpath = fullpath.vx_string();
    Path path = Paths.get(sfullpath);
    if (Files.exists(path)) {
      output = Core.c_true;
    }"
  :kotlin :auto)
 :test (test-true
        (boolean-exists<-file
         (file
          :name "boolean_exists_from_file.txt"
          :path (string path-test-resources "/vx"))))
 :clientserver :server
 :doc "Returns true if file/path exists.")

(func boolean-write<-file-any : boolean
 [file  : file
  value : any]
 (boolean-write<-file-string
  file
  (string<-any value))
 :context
 :sideeffects "Writes to file io"
 :clientserver :server
 :doc "Write any data structure as a file.")

(func boolean-write<-file : boolean
 [file : file]
 (boolean-write<-file-string
  file
  (:text file))
 :context
 :sideeffects "Writes to file io"
 :clientserver :server
 :doc "Write a File to Disk")

(func boolean-write<-file-string : boolean
 [file : file
  text : string]
 (native
  :cpp
   "output = vx_data_file::vx_boolean_write_from_file_string(file, text);"
  :csharp :auto
  :java
   "Core.Type_string fullpath = File.f_pathfull_from_file(file);
    String sfullpath = fullpath.vx_string();
    Path path = Paths.get(sfullpath);
    String stext = text.vx_string();
    byte[] bytes = stext.getBytes();
    java.nio.file.Files.write(path, bytes);
    output = Core.c_true;"
  :kotlin :auto)
 :context
 :messages
 :permission
 :sideeffects "Writes to file io"
 :test (test-true
        (boolean-write<-file-string
         (file
          :name "boolean_write_from_file_string.txt"
          :path (string path-test-resources "/vx"))
         "writetext"))
 :clientserver :server
 :doc "Write a File to Disk")

(func file<-path : file
 [path : string]
 (let : file
  [pos : int :=
    (typ/int<-string-findlast
     path "/")
   name : string :=
    (typ/string<-string-start
     path (+1 pos))
   pth : string :=
    (typ/string<-string-end
     path (-1 pos))]
  (file
   :name name
   :path pth))
 :doc "Returns a file from a given path")

(func file-read<-file : file
 [file : file]
 (copy
  file
  :text (string-read<-file file))
 :context
 :permission
 :test (test
        (file
         :name "string_read_from_file.txt"
         :path (string path-test-resources "/vx")
         :text "testdata")
        (file-read<-file
         (file
          :name "string_read_from_file.txt"
          :path (string path-test-resources "/vx"))))
 :clientserver :server
 :doc "Read a Text File from Disk")

(func string-read<-file : string
 [file : file]
 (native
  :cpp
   "output = vx_data_file::vx_string_read_from_file(file);"
  :csharp :auto
  :java
   "output = vx_string_read_from_file(file);"
  :kotlin :auto)
 :context
 :permission
 :messages
 :test (test
        "testdata"
        (string-read<-file
         (file
          :name "string_read_from_file.txt"
          :path (string path-test-resources "/vx"))))
 :clientserver :server
 :doc "Read text from a File")

(func name<-file : string
 [file : file]
 (:name file)
 :doc "Returns path and name from file.")

(func path<-file : string
 [file : file]
 (:path file)
 :doc "Returns path and name from file.")

(func pathcurrent<-os : string
 (native
  :cpp
   "output = vx_data_file::vx_pathcurrent_from_os();"
  :csharp :auto
  :java
   "Path path = Paths.get(“”);
    path = path.toAbsolutePath();
    String spath = path.toString();
    output = Core.vx_new_string(spath);"
  :kotlin :auto)
 :clientserver :server
 :doc  "Returns current system path.")

(func pathfull<-file : string
 [file : file]
 (let : string
  [path : string := (path<-file file)
   name : string := (name<-file file)]
  (if : string
   (then
    (is-empty path)
    name)
   (else
    (string path "/" name))))
 :test (test
        "fname"
        (pathfull<-file
         (file
          :name "fname")))
       (test
        "fpath/fname"
        (pathfull<-file
         (file
          :path "fpath"
          :name "fname")))
 :doc "Returns full path and name from file.")
