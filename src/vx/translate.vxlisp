(package vx/translate
 :libs (lib csv :path vx/data/csv)
       (lib fil :path vx/data/file)
 :doc "Language to language translation tools")

(func session<-session-name : session
 [session : session
  name    : string]
 (copy session
  :translation (translation<-session-name
                session
                name))
 :doc "Returns an updated session with a translationmap and a translation name.")

(func session<-session-translation : session
 [session     : session
  translation : translation]
 (copy session
  :translation translation)
 :doc "Returns an updated session with a translation.")

(func session<-session-translationmap-name : session
 [session        : session
  translationmap : translationmap
  name           : string]
 (copy session
  :translation (any<-map translationmap name)
  :translationmap translationmap)
 :doc "Returns an updated session with a translationmap and a translation name.")

(func translate : string
 [text : string]
 (translate<-translation-string
  (translation<-context)
  text)
 :test (test
        "!NotFound!"
        (translate "!NotFound!"))
 :context
 :doc "Returns a translated string from current context.")

(func translate : string
 [msg : msg]
 (let : string
  [path : string := (:path msg)
   code : string := (:code msg)
   text : string := (string
                     "!"
                     path
                     " "
                     code)]
  (translate
   text))
 :test (test
        "Repl Type Not Found"
        (translate
         (msg
          :path "vx/repl/repl/repl<-string-argmap"
          :code "repltypenotfound")))
 :context
 :doc "Returns a translated string from a msg.")

(func translation<-context : translation
 (:translation (session<-context))
 :context
 :doc "Returns a translated string from current context.")

(func translate<-translation-string : string
 [translation : translation
  text        : string]
 (if : string
  (is-empty translation)
  text
  (let : string
   [wordmap : stringmap := (:wordmap translation)
    xlate   : string    := (any<-map wordmap text)]
   (if : string
    (is-empty xlate)
    text
    xlate)))
 :test (test
        "Hola"
        (translate<-translation-string
         (translation
          :wordmap
           (stringmap
            "Hello" "Hola"))
         "Hello"))
 :doc "Returns a translated string from a translation or the original text if not found.")

(func translate<-translationmap-name-string : string
 [translationmap : translationmap
  name           : string
  text           : string]
 (let : string
  [translation : translation := (any<-map
                                 translationmap
                                 name)]
  (translate<-translation-string
   translation
   text))
 :doc "Returns a translated string from a translation map given a translation name and text.")

(func translation<-session-name : translation
 [session : session
  name    : string]
 (let : translation
  [translationmap : translationmap := (:translationmap session)]
  (any<-map : translation
   translationmap
   name))
 :doc "Returns a translation from a session by name.")

(func translation-load-session : translation
 [translation : translation]
 :context
 :sideeffects "Alters current (:translation session)"
 :doc "Returns a translation from the translation folder.")

(func translationmap<-translations : translationmap
 [translations : translationlist :...]
 (map<-list : translationmap
  translations
  (fn : string
   [translation : translation]
   (:name translation)))
 :doc "Returns a translationmap from one or more translations.")
