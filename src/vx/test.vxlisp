(package vx/test
 :libs (lib file :path vx/data/file)
       (lib html :path vx/web/html)
 :doc  "Test Suite builder")

(type testcase : struct
 :properties
  [passfail     : boolean
   testpkg      : string
   casename     : string
   describelist : testdescribelist]
 :doc        "Structure to describe a test case")

(type testcaselist : list
 :allowtypes [testcase]
 :doc        "List of test cases")

(type testcoveragedetail : struct
 :properties
  [constmap : intmap
   funcmap  : intmap
   testpkg  : string
   typemap  : intmap]
 :doc        "Structure to describe a test coverage detail")

(type testcoveragenums : struct
 :properties
  [pct     : int
   testpkg : string
   tests   : int
   total   : int]
 :doc        "Structure to describe a test coverage summary")

(type testcoveragesummary : struct
 :properties
  [bigospacenums : testcoveragenums
   bigotimenums  : testcoveragenums
   constnums     : testcoveragenums
   docnums       : testcoveragenums
   funcnums      : testcoveragenums
   testpkg       : string
   totalnums     : testcoveragenums
   typenums      : testcoveragenums]
 :doc        "Structure to describe a test coverage summary")

(type testdescribe : struct
 :properties
  [describename : string
   testpkg      : string
   testresult   : testresult]
 :doc        "Structure to describe test results")

(type testdescribelist : list
 :allowtypes [testdescribe]
 :doc        "List of testdescribe")

(type testpackage : struct
 :properties
  [caselist        : testcaselist
   coveragedetail  : testcoveragedetail
   coveragesummary : testcoveragesummary
   passfail        : boolean
   testpkg         : string]
 :doc        "Structure to hold all tests for a package")

(type testpackagelist : list
 :allowtypes [testpackage]
 :doc        "List of testpackage")

(type testresult : struct
 :properties
  [code      : string
   passfail  : boolean
   expected  : any
   actual    : any
   fn-actual : any<-func-async]
 :doc        "Structure to hold test results")

(type testresultlist : list
 :allowtypes [testresult]
 :doc        "List of test results")

(const stylesheet-test : stylesheet
 (stylesheet-loadmap
  (stylesheet
   :name "Test Suite"
   :styles
    (stylelist
     (style
      :name "body"
      :props
       (propmap
        "font-size"   "0.9em"
        "font-family" "sans-serif"))
     (style
      :name "details summary"
      :props
       (propmap
        "cursor"  "pointer"
        "display" "inline-flex"
        "gap"     "10px"))
     (style
      :name "table"
      :props
       (propmap
        "vertical-align"  "top"
        "border-collapse" "collapse"
        "margin"          "25px 0"
        "min-width"       "400px"
        "box-shadow"      "0 0 20px rgba(0, 0, 0, 0.15)"))
     (style
      :name "thead tr"
      :props
       (propmap
        "background-color" "#009879"
        "color"            "#ffffff"
        "text-align"       "left"))
     (style
      :name "td"
      :props
       (propmap
        "padding"        "10px 10px"
        "vertical-align" "top"))
     (style
      :name "tbody tr"
      :props
       (propmap
        "border-bottom" "1px solid #dddddd"))
     (style
      :name "tbody tr:nth-of-type(even)"
      :props
       (propmap
        "background-color" "#f3f3f3"))
     (style
      :name "tbody tr:last-of-type"
      :props
       (propmap
        "border-bottom" "2px solid #009879"))
     (style
      :name "tbody tr.active-row"
      :props
       (propmap
        "font-weight" "bold"
        "color"       "#009879"))
     (style
      :name
       ".failflag"
      :props
       (propmap
        "background-color" "red"
        "color"            "white"
        "padding-left"     "4px"
        "padding-right"    "4px"
        "padding-top"      "1px"
        "padding-bottom"   "1px"))
     (style
      :name ".passflag"
      :props
       (propmap
        "background-color" "green"
        "color"            "white"
        "padding-left"     "4px"
        "padding-right"    "4px"
        "padding-top"      "1px"
        "padding-bottom"   "1px"))
     (style
      :name ".coveragenums"
      :props
       (propmap
        "width" "90px"))
     (style
      :name ".coveragepct"
      :props
       (propmap
        "text-align" "right"))
     (style
      :name ".coveragepctgreen"
      :props
       (propmap
        "background-color" "green"
        "color"            "white"
        "text-align"       "right"))
     (style
      :name ".coveragepctred"
      :props
       (propmap
        "background-color" "red"
        "color"            "white"
        "text-align"       "right"))
     (style
      :name ".pkgheader"
      :props
       (propmap
        "display" "inline-flex"
        "gap"     "10px"))
     (style
      :name ".pkgname"
      :props
       (propmap
        "font-weight" "bold"
        "width"       "180px"))
     (style
      :name ".preformatted"
      :props
       (propmap
        "display"      "block"
        "unicode-bidi" "embed"
        "font-family"  "monospace"
        "white-space"  "pre"))
    )
  )
 )
 :doc "The default Test Stylesheet")

(func context-test : context
 [args : anylist :...]
 (context
  :session
   (session
    :user
     (user
      :security (security-test))))
 :doc "Returns the default context for test case execution. Arguments come from the command line.")

(func div<-testcaselist : div
 [testcaselist : testcaselist]
 (div
  (table
   :thead (thead
           (tr
            (td (p :text "Pass?"))
            (td (p :text "Name"))
            (td (p :text "Test"))
            (td (p :text "Expected"))
            (td (p :text "Actual"))
            ))
   :tbody (tbody
           (trlist<-testcaselist testcaselist))
  )
 )
 :doc "")

(func div<-testpackage : div
 [testpackage : testpackage]
 (let : div
  [testcoveragesummary : testcoveragesummary :=
    (:coveragesummary testpackage)
   pkgname : string :=
    (:testpkg testpackage)
   caselist : testcaselist :=
    (:caselist testpackage)
   passfail : boolean :=
    (:passfail testpackage)
   pkgnamestyle : style :=
    (style<-stylesheet-name
     stylesheet-test ".pkgname")
   node : div := (div<-testcaselist caselist)
   nodes : divchildlist := (divchildlist node)
   p-passfail : p := (p<-passfail passfail)
   p-pkgname : p := (p :style pkgnamestyle :text pkgname)
   p-totalnums : p :=
    (p<-testcoveragenums
     (:totalnums testcoveragesummary))
   p-coveragenums : p :=
    (p<-testcoveragenums
     (:typenums testcoveragesummary))
   p-constnums : p :=
    (p<-testcoveragenums
     (:constnums testcoveragesummary))
   p-funcnums : p :=
    (p<-testcoveragenums
     (:funcnums testcoveragesummary))
   p-docnums : p :=
    (p<-testcoveragenums
     (:docnums testcoveragesummary))
   p-bigospacenums : p :=
    (p<-testcoveragenums
     (:bigospacenums testcoveragesummary))
   p-bigotimenums : p :=
    (p<-testcoveragenums
     (:bigotimenums testcoveragesummary))
   summary : divchildlist :=
    (divchildlist
     p-passfail
     p-pkgname
     p-totalnums
     p-coveragenums
     p-constnums
     p-funcnums
     p-docnums
     p-bigospacenums
     p-bigotimenums)
   details : details :=
    (details
     :summary summary
     :nodes nodes)]
  (div details)
 )
 :doc "Retuns a div from a test package")

(func div<-testpackagelist : div
 [testpackagelist : testpackagelist]
 (let : div
  [stylepassfail : style :=
   (style<-stylesheet-name
    stylesheet-test ".passfail")
   stylepkgname : style :=
    (style<-stylesheet-name
     stylesheet-test ".pkgname")
   stylepkgheader : style :=
    (style<-stylesheet-name
     stylesheet-test ".pkgheader")
   stylecoveragenum : style :=
    (style<-stylesheet-name
     stylesheet-test ".coveragenums")]
  (div
   (div :style stylepkgheader
    (p :style stylepassfail    :text "Pass?")
    (p :style stylepkgname     :text "Package Name")
    (p :style stylecoveragenum :text "Coverage")
    (p :style stylecoveragenum :text "(type)")
    (p :style stylecoveragenum :text "(const)")
    (p :style stylecoveragenum :text "(func)")
    (p :style stylecoveragenum :text ":doc")
    (p :style stylecoveragenum :text ":bigospace")
    (p :style stylecoveragenum :text ":bigotime")
   )
   (div
    (divchildlist<-testpackagelist testpackagelist))
  )
 )
 :doc "")

(func divchildlist<-testpackagelist : divchildlist
 [testpackagelist : testpackagelist]
 (list<-list testpackagelist div<-testpackage)
 :doc "Returns a divlist from a testpackagelist.")

(func file-test : file/file
 (file
  :name "testsuite.vxlisp"
  :path path-test-resources)
 :test (test-true
        (boolean-exists<-file
         (file
          :name "testsuite.vxlisp"
          :path path-test-resources)))
 :clientserver :server
 :doc "Default file location for testsuite.vxlisp")

(func file-testnode : file/file
 (file
  :name "testsuitenode.vxlisp"
  :path path-test-resources)
 :test (test-true
        (boolean-exists<-file
         (file
          :name "testsuitenode.vxlisp"
          :path path-test-resources)))
 :clientserver :server
 :doc "Default file location for testsuitenode.vxlisp")

(func file-testhtml : file/file
 (file
  :name "testsuite.html"
  :path path-test-resources)
 :test (test-true
        (boolean-exists<-file
         (file
          :name "testsuite.html"
          :path path-test-resources)))
 :clientserver :server
 :doc "Default file location for testsuite.html")

(func html<-divtest : html
 [divtest : div]
 (html
  :lang "en"
  :head (head
         (meta
          :charset "utf-8")
         (meta
          :name    "viewport"
          :content "width=device-width, initial-scale=1.0")
         (title
          :text "Test Suite")
         stylesheet-test)
  :body (body
         (div (h1 "Test Suite"))
         divtest))
 :doc "Returns html from test div")

(func p<-passfail : p
 [passfail : boolean]
 (let
  [text : string :=
    (if passfail "Pass" "Fail")
   stylename : string :=
    (if passfail ".passflag" ".failflag")
   style : style :=
    (style<-stylesheet-name stylesheet-test stylename)]
  (p
   :style style
   :text  text))
 :doc "Returns a <p> tag from a passfail boolean value")

(func p<-testcoveragenums : p
 [nums  : testcoveragenums]
 (p
  :style
   (style<-stylesheet-name
    stylesheet-test ".coveragenums")
  :text
   (string
    (:pct nums) "% " (:tests nums) "/" (:total nums)))
 :doc "Returns <p>tests / total (pct%)</p> from testcoveragenums")

(func resolve-testcase : testcase :async
 [testcase : testcase]
 (let
  [describelist : testdescribelist :=
    (:describelist testcase)
   resolvedlist : testdescribelist :=
    (resolve-testdescribelist describelist)
   passfaillist : booleanlist :=
    (list<-list : booleanlist
     resolvedlist
     (fn : boolean
      [testdescribe : testdescribe]
      (let : boolean
       [testresult : testresult := (:testresult testdescribe)]
       (:passfail testresult))))
   passfail : boolean :=
    (and passfaillist)]
   (copy
    testcase
    :passfail     passfail
    :describelist resolvedlist))
 :doc "Resolves a testcase")

(func resolve-testcaselist : testcaselist :async
 [testcaselist : testcaselist]
 (list<-list-async testcaselist resolve-testcase)
 :doc "Resolves a testcaselist")

(func resolve-testdescribe : testdescribe :async
 [testdescribe : testdescribe]
 (let
  [testresult : testresult := (:testresult testdescribe)
   resolved   : testresult := (resolve-testresult testresult)]
   (copy
    testdescribe
    :testresult resolved))
 :doc "Resolves a testdescribe")

(func resolve-testdescribelist : testdescribelist :async
 [testdescribelist : testdescribelist]
 (list<-list-async testdescribelist resolve-testdescribe)
 :doc "Resolves a testdescribelist")

(func resolve-testpackage : testpackage :async
 [testpackage : testpackage]
 (let
  [testcaselist : testcaselist :=
    (:caselist testpackage)
   resolvedlist : testcaselist :=
    (resolve-testcaselist testcaselist)
   passfaillist : booleanlist  :=
    (list<-list : booleanlist
     resolvedlist
     (fn : boolean
      [testcase : testcase]
      (:passfail testcase)
     )
    )
   passfail : boolean := (and passfaillist)]
  (copy
   testpackage
   :passfail passfail
   :caselist resolvedlist))
 :doc "Resolves a testpackage")

(func resolve-testpackagelist : testpackagelist :async
 [testpackagelist : testpackagelist]
 (list<-list-async testpackagelist resolve-testpackage)
 :doc "Resolves a testpackagelist")

(func resolve-testresult : testresult :async
 [testresult : testresult]
 (let : testresult
  [fn-actual : any<-func-async := (:fn-actual testresult)
   expected  : any := (:expected testresult)
   actual    : any := (resolve-async fn-actual)]
  (if : testresult
   (then (is-empty fn-actual) testresult)
   (else
    (let : testresult
     [passfail : boolean := (= expected actual)]
     (copy
      testresult
      :passfail passfail
      :actual   actual
     )
    )
   )
  )
 )
 :doc "Resolves a testresult")

(func security-test : security
 (security
  :allowfuncs
   (funclist
    file/boolean-write<-file-any
    file/boolean-write<-file-string
    file/file-read<-file
    file/string-read<-file))
 :doc "Returns the default security for test case execution. Arguments come from the command line.")

(func test : testresult
 [expected : any-1
  actual   : any-2]
 (testresult
  :code     :eq
  :passfail (= expected actual)
  :expected expected
  :actual   actual)
 :context
 :messages
 :doc "Test expected equal actual")

(func test : testresult
 [expected  : any
  fn-actual : any<-func-async]
 (testresult
  :code      :eq
  :expected  expected
  :fn-actual fn-actual)
 :context
 :messages
 :doc "Async Test expected equal actual")

(func test-false : testresult
 [actual : any]
 (testresult
  :code     :false
  :passfail (= false actual)
  :expected false
  :actual   actual)
 :context
 :messages
 :doc "Test expected to be false")

(func test-false : testresult
 [fn-actual : any<-func-async]
 (testresult
  :code      :false
  :expected  false
  :fn-actual fn-actual)
 :context
 :messages
 :doc "Async Test expected to be false")

(func test-gt : testresult
 [expected : any
  actual   : any]
 (testresult
  :code     :gt
  :passfail (> expected actual)
  :expected expected
  :actual   actual)
 :context
 :messages
 :doc "Test expected greater than actual")

(func test-gt : testresult
 [expected  : any
  fn-actual : any<-func-async]
 (testresult
  :code      :gt
  :expected  expected
  :fn-actual fn-actual)
 :context
 :messages
 :doc "Async Test expected greater than actual")

(func test-ne : testresult
 [expected : any
  actual   : any]
 (testresult
  :code     :ne
  :passfail (!= expected actual)
  :expected expected
  :actual   actual)
 :context
 :messages
 :doc "Test expected not equal actual")

(func test-ne : testresult
 [expected  : any
  fn-actual : any<-func-async]
 (testresult
  :code      :ne
  :expected  expected
  :fn-actual fn-actual)
 :context
 :messages
 :doc "Async Test expected not equal actual")

(func test-string : testresult
 [expected : any
  actual   : any]
 (testresult
  :passfail
   (=
    (string<-any expected)
    (string<-any actual))
  :expected expected
  :actual   actual)
 :context
 :messages
 :doc "Test that the string version of expected equal actual")

(func test-string : testresult
 [expected  : any
  fn-actual : any<-func-async]
 (testresult
  :code      :string
  :expected  expected
  :fn-actual fn-actual)
 :context
 :messages
 :doc "Async Test that the string version of expected equal actual")

(func test-true : testresult
 [actual : any]
 (testresult
  :code     :true
  :passfail (= true actual)
  :expected true
  :actual   actual)
 :context
 :messages
 :doc "Test expected to be true")

(func test-true : testresult
 [fn-actual : any<-func-async]
 (testresult
  :code      :true
  :expected  true
  :fn-actual fn-actual)
 :context
 :messages
 :doc "Async Test expected to be true")

(func tr<-testdescribe-casename : tr
 [testdescribe : testdescribe
  casename     : string]
 (let : tr
  [describename : string :=
    (:describename testdescribe)
   result : testresult :=
    (:testresult testdescribe)
   passfail : boolean :=
    (:passfail result)
   expected : string :=
    (string<-any (:expected result))
   actual : string :=
    (string<-any (:actual result))
   prestyle : style :=
    (style<-stylesheet-name
     stylesheet-test ".preformatted")]
  (tr
   (td (p<-passfail passfail))
   (td (p :style prestyle :text casename))
   (td (p :style prestyle :text describename))
   (td (p :style prestyle :text expected))
   (td (p :style prestyle :text actual))
  )
 )
 :doc "Returns tr from a testdescribe")

(func trlist<-testcase : trlist
 [testcase : testcase]
 (let : trlist
  [describelist : testdescribelist :=
    (:describelist testcase)
   casename : string :=
    (:casename testcase)]
  (list<-list : trlist
   describelist
   (fn : tr
    [testdescribe : testdescribe]
    (tr<-testdescribe-casename testdescribe casename))
  )
 )
 :doc "")

(func trlist<-testcaselist : trlist
 [testcaselist : testcaselist]
 (list-join<-list : trlist
  testcaselist
  trlist<-testcase)
 :doc "Returns a trlist from a testcaselist.")
