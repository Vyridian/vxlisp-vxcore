  fun <T : vx_core.Type_any> vx_any_from_for_until_loop_max(
    generic_any_1 : T,
    start : T,
    fn_until : vx_core.Func_boolean_from_any,
    fn_loop : vx_core.Func_any_from_any,
    max : vx_core.Type_int) : T {
    var output : T = start
    var iscontinue : Boolean = true
    var icount : Int = 0
    var imax : Int = max.vx_int()
    while (iscontinue) {
      if (icount >= imax) {
        val path : String = "vx/collection/any<-for-until-loop-max"
        val code : String = ":loopmaximumexceeded"
        val details : vx_core.Type_int = vx_core.vx_new_int(icount)
        val msg : vx_core.Type_msg = vx_core.vx_msg_from_error(
          path, code, details)
        output = vx_core.vx_copy(output, msg)
        iscontinue = false
      } else {
        icount += 1
        output = fn_loop.vx_any_from_any(
          generic_any_1, output)
        val valcontinue : vx_core.Type_boolean = fn_until.vx_boolean_from_any(
          output)
        iscontinue = !valcontinue.vx_boolean()
      }
    }
    return output
  }

  fun <T : vx_core.Type_any> vx_any_from_for_while_loop_max(
    generic_any_1 : T,
    start : T,
    fn_while : vx_core.Func_boolean_from_any,
    fn_loop : vx_core.Func_any_from_any,
    max : vx_core.Type_int) : T {
    var output : T = start
    var iscontinue : Boolean = true
    var icount : Int = 0
    val imax : Int = max.vx_int()
    while (iscontinue) {
      if (icount >= imax) {
        val path : String = "vx/collection/any<-for-while-loop-max"
        val code : String = ":loopmaximumexceeded"
        val details : vx_core.Type_int = vx_core.vx_new_int(icount)
        val msg : vx_core.Type_msg = vx_core.vx_msg_from_error(
          path, code, details)
        output = vx_core.vx_copy(output, msg)
        iscontinue = false
      } else {
        icount += 1
        val valcontinue : vx_core.Type_boolean = fn_while.vx_boolean_from_any(output)
        iscontinue = valcontinue.vx_boolean()
        if (iscontinue) {
          output = fn_loop.vx_any_from_any(
            generic_any_1, output)
        }
      }
    }
    return output
  }

  // (func anymap<-struct)
  fun vx_anymap_from_struct(
    structure : vx_core.Type_struct) : vx_core.Type_anymap {
    val map : Map<String, vx_core.Type_any> = structure.vx_map()
    val output : vx_core.Type_anymap = vx_core.vx_new_map(
      vx_core.t_anymap, map)
    return output
  }

  fun <T : vx_core.Type_list> vx_list_from_for_end_loop(
    generic_list_1 : T,
    start : vx_core.Type_int,
    end : vx_core.Type_int,
    fn_loop : vx_core.Func_any_from_int) : T {
    var output : T = vx_core.f_empty(
      generic_list_1)
    val listvals : MutableList<vx_core.Type_any> = ArrayList<vx_core.Type_any>()
    val istart : Int = start.vx_int()
    val iend : Int = end.vx_int()
    if (istart <= iend) {
      for (i : Int in istart..iend) {
        val value : vx_core.Type_any = fn_loop.vx_any_from_int(
          vx_core.t_any, vx_core.vx_new_int(i)
        )
        listvals.add(value)
      }
    } else {
      for (i : Int in istart..iend) {
        val value : vx_core.Type_any = fn_loop.vx_any_from_int(
          vx_core.t_any, vx_core.vx_new_int(i)
        )
        listvals.add(value)
      }
    }
    if (listvals.size > 0) {
      val anylist : vx_core.Type_anylist = vx_core.vx_new(
        vx_core.t_anylist, listvals)
      output = vx_core.f_new(generic_list_1, anylist)
    }
    return output
  }

  fun <T : vx_core.Type_list> vx_list_from_for_while_loop_max(
    generic_list_1 : T,
    start : vx_core.Type_any,
    fn_while : vx_core.Func_boolean_from_any,
    fn_loop : vx_core.Func_any_from_any,
    max : vx_core.Type_int) : T {
    var output : T = vx_core.f_empty(generic_list_1)
    val listvals : MutableList<vx_core.Type_any> = ArrayList<vx_core.Type_any>()
    var iscontinue : Boolean = true
    var icount : Int = 0
    val imax : Int = max.vx_int()
    var work : vx_core.Type_any = start
    while (iscontinue) {
      if (icount >= imax) {
        val path : String = "vx/collection/list<-for-until-loop-max"
        val code : String = ":loopmaximumexceeded"
        val details : vx_core.Type_int = vx_core.vx_new_int(icount)
        val msg : vx_core.Type_msg = vx_core.vx_msg_from_error(
          path, code, details)
        output = vx_core.vx_copy(
          output, msg)
        iscontinue = false
      } else {
        val valwhile : vx_core.Type_boolean = fn_while.vx_boolean_from_any(
          work)
        iscontinue = !valwhile.vx_boolean()
        if (iscontinue) {
          icount += 1
          work = fn_loop.vx_any_from_any(
            vx_core.t_any, work)
          listvals.add(work)
        }
      }
    }
    if (listvals.size > 0) {
      val anylist : vx_core.Type_anylist = vx_core.vx_new(
        vx_core.t_anylist, listvals)
      output = vx_core.f_new(
        generic_list_1, anylist)
    }
    return output
  }

  fun <T : vx_core.Type_list> vx_list_from_list_filter(
    generic_list_1 : T,
    vallist : vx_core.Type_list,
    fn_filter : vx_core.Func_any_from_any) : T {
    var output : T = vx_core.f_empty(generic_list_1)
    val listval : List<vx_core.Type_any> = vallist.vx_list()
    val items : MutableList<vx_core.Type_any> = ArrayList<vx_core.Type_any>()
    for (value : vx_core.Type_any in listval) {
      val newval : vx_core.Type_any = fn_filter.vx_any_from_any(
        vx_core.t_any, value)
      val isempty : vx_core.Type_boolean = vx_core.f_is_empty_1(
        newval)
      if (!isempty.vx_boolean()) {
        items.add(newval)
      }
    }
    output = vx_core.vx_new(generic_list_1, items)
    return output
  }

  fun <X : vx_core.Type_list, Y : vx_core.Type_list> vx_list_from_list_join_1(
    generic_list_1 : X,
    values : Y,
    fn_any_from_any : vx_core.Func_any_from_any) : X {
    val list_value : List<vx_core.Type_any> = values.vx_list()
    val list_result : MutableList<vx_core.Type_any> = ArrayList<vx_core.Type_any>()
    for (value : vx_core.Type_any in list_value) {
      val listoflist : vx_core.Type_any = fn_any_from_any.vx_any_from_any(
        generic_list_1, value
      )
      if (listoflist is vx_core.Type_list) {
        val vallist : vx_core.Type_list = listoflist as vx_core.Type_list
        val listval : List<vx_core.Type_any> = vallist.vx_list()
        list_result.addAll(listval)
      }
    }
    val output : X = vx_core.f_any_from_any(
      generic_list_1,
      generic_list_1.vx_new(list_result)
    )
    return output
  }

  fun <T : vx_core.Type_list> vx_list_from_list_start_end(
    generic_list_1 : T,
    values : vx_core.Type_list,
    start : vx_core.Type_int,
    end : vx_core.Type_int) : T {
    var output : T = vx_core.f_empty(generic_list_1)
    val istart : Int = start.vx_int()
    var iend : Int = end.vx_int()
    val listval : List<vx_core.Type_any> = values.vx_list()
    val maxlen : Int = listval.size
    if (iend < 0) {
     iend += maxlen
    }
    if (istart < 1) {
    } else if (istart > iend) {
    } else if (istart > maxlen) {
    } else {
      if (iend >= maxlen) {
        iend = maxlen
      }
      val listsub : List<vx_core.Type_any> = listval.subList(
        istart - 1, iend)
      output = vx_core.vx_new(generic_list_1, listsub)
    }
    return output
  }

  fun <T : vx_core.Type_map> vx_map_from_map_keys(
    generic_map_1 : T,
    valuemap : vx_core.Type_map,
    keys : vx_core.Type_stringlist) : T {
    var output : T = vx_core.f_empty(generic_map_1)
    val keylist : List<vx_core.Type_string> = keys.vx_liststring()
    if (keylist.size > 0) {
      val map : Map<String, vx_core.Type_any> = valuemap.vx_map()
      val values : MutableList<vx_core.Type_any> = ArrayList<vx_core.Type_any>()
      for (key : vx_core.Type_string in keylist) {
        val value : vx_core.Type_any? = map.get(
          key.vx_string())
        if (value != null) {
          values.add(key)
          values.add(value)
        }
      }
      val anyvalues : vx_core.Type_anylist = vx_core.vx_new_anylist(
        values)
      output = vx_core.f_new(
        generic_map_1, anyvalues)
    }
    return output
  }
