  public interface Type_replfunc {
    public Core.Type_any vx_repl(Core.Type_anylist arglist);
  }

  public interface Type_replfunc_async {
    public CompletableFuture<Core.Type_any> vx_repl(Core.Type_anylist arglist);
  }

  public static List<Core.Type_any> emptylistany = Core.immutablelist(new ArrayList<Core.Type_any>());

  public static Map<String, Core.Type_any> emptymapany = Core.immutablemap(new LinkedHashMap<String, Core.Type_any>());

  public static <T> List<T> immutablelist(List<T> listany) {
    return Collections.unmodifiableList(listany);
  }

  public static <T> Map<String, T> immutablemap(Map<String, T> mapany) {
    return Collections.unmodifiableMap(mapany);
  }

  public static class Class_base {
    protected int vx_iref = 0;
    protected Core.Type_msgblock vxmsgblock = null;
    public Core.Type_constdef vx_p_constdef = null;
    public Core.Type_constdef vx_constdef() {
      if (this.vx_p_constdef == null) {
        return Core.e_constdef;
      } else {
        return this.vx_p_constdef;
      }
    }
    public List<Type_any> vx_dispose() {
      this.vx_iref = 0;
      this.vxmsgblock = null;
      this.vx_p_constdef = null;
      return Core.emptylistany;
    }
    public Core.Type_msgblock vx_msgblock() {
      if (this.vxmsgblock == null) {
        return Core.e_msgblock;
      } else {
        return this.vxmsgblock;
      }
    }
    public boolean vx_release() {
      boolean output = false;
      if (this.vx_iref < 0) {
      } else if (vx_iref == 0) {
        vx_iref = -1;
        output = true;
      } else {
        vx_iref -= 1;
      }
      return output;
    }
    public void vx_reserve() {this.vx_iref += 1;}
  }

  public static class KeyValue<T> {
    public String key = "";
    public T value = null;
  }

  public static Core.Type_constdef constdef_new(
    String pkgname,
    String name,
    Core.Type_any typ
  ) {
    Core.Class_constdef output = new Core.Class_constdef();
    output.vx_p_pkgname = Core.vx_new_string(pkgname);
    output.vx_p_name = Core.vx_new_string(name);
    output.vx_p_type = typ;
    return output;
  }

  public static Core.Type_funcdef funcdef_new(
    String pkgname,
    String name,
    int idx,
    boolean async,
    Core.Type_any typ
  ) {
    Core.Class_funcdef output = new Core.Class_funcdef();
    output.vx_p_pkgname = Core.vx_new_string(pkgname);
    output.vx_p_name = Core.vx_new_string(name);
    output.vx_p_idx = Core.vx_new_int(idx);
    output.vx_p_async = Core.vx_new_boolean(async);
    output.vx_p_type = typ;
    return output;
  }

  public static Core.Type_any[] arrayany_from_anylist(
    final Core.Type_anylist list
  ) {
    List<Core.Type_any> listany = list.vx_list();
    Core.Type_msgblock msgblock = list.vx_msgblock();
    if (msgblock == null) {
    } else if (msgblock == Core.e_msgblock) {
    } else {
     listany = new ArrayList<>(listany);
     listany.add(msgblock);
    }
    Core.Type_any[] output = listany.toArray(new Core.Type_any[0]);
    return output;
  }

  @SafeVarargs
  public static <T> List<T> arraylist_from_array(final T... items) {
    List<T> output = new ArrayList<T>(Arrays.asList(items));
    output = Core.immutablelist(output);
    return output;
  }

  public static <T extends Core.Type_any, U extends Core.Type_any> List<T> arraylist_from_arraylist(final T generic_any_1, final List<U> listval) {
    List<T> output = new ArrayList<>();
    for (Core.Type_any value : listval) {
      T t_val = Core.f_any_from_any(generic_any_1, value);
      output.add(t_val);
    }
    output = Core.immutablelist(output);
    return output;
  }

  public static <T, U> List<T> arraylist_from_arraylist_fn(final List<U> listval, final Function<U, T> fn_any_from_any) {
    List<T> output = new ArrayList<>();
    for (U value_u : listval) {
      T t_val = fn_any_from_any.apply(value_u);
      output.add(t_val);
    }
    output = Core.immutablelist(output);
    return output;
  }

  public static <T extends Core.Type_any, U extends Core.Type_any> List<T> arraylist_from_linkedhashmap(final T generic_any_1, final Map<String, U> mapval) {
    List<T> output = new ArrayList<T>();
    Set<String> keys = mapval.keySet();
    for (String key : keys) {
      U u_val = mapval.get(key);
      T t_val = Core.f_any_from_any(generic_any_1, u_val);
      output.add(t_val);
    }
    output = Core.immutablelist(output);
    return output;
  }

  public static <T, U> List<T> arraylist_from_linkedhashmap_fn(final Map<String, U> mapval, final BiFunction<String, U, T> fn_any_from_key_value) {
    List<T> output = new ArrayList<T>();
    Set<String> keys = mapval.keySet();
    for (String key : keys) {
      U u_val = mapval.get(key);
      T t_val = fn_any_from_key_value.apply(key, u_val);
      output.add(t_val);
    }
    return output;
  }

  @SafeVarargs
  public static <T> LinkedHashMap<String, T> hashmap_from_keyvalues(final KeyValue<T>... keyvalues) {
    LinkedHashMap<String, T> output = new LinkedHashMap<String, T>();
    for (KeyValue<T> keyvalue : keyvalues) {
      String key = keyvalue.key;
      T value = keyvalue.value;
      output.put(key, value);
    }
    return output;
  }

  public static <T> KeyValue<T> keyvalue_from_key_value(final String key, final T value) {
    KeyValue<T> output = new KeyValue<T>();
    output.key = key;
    output.value = value;
    return output;
  }

  public static <T extends Core.Type_any> LinkedHashMap<String, T> map_from_map(final LinkedHashMap<String, Core.Type_any> mapval) {
    LinkedHashMap<String, T> output = new LinkedHashMap<String, T>();
    Set<String> keys = mapval.keySet();
    for (String key : keys) {
      Core.Type_any value = mapval.get(key);
      try {
        @SuppressWarnings("unchecked")
        T castval = (T)value;
        output.put(key, castval);
      } catch (Exception ex) {
        Core.vx_log("map<-map", ex);
      }
    }
    return output;
  }

  // vx_new(generic_any_1, args...)
  public static <T extends Core.Type_any> T vx_new(
    final T generic_any_1,
    final Object... values) {
    Core.Type_any value = generic_any_1.vx_new(values);
    T output = Core.f_any_from_any(generic_any_1, value);
    return output;
  }

  // vx_constdef<-any(any)
  public static Core.Type_constdef vx_constdef_from_any(
    final Core.Type_any value) {
    Core.Type_constdef output = value.vx_constdef();
    if (output == null) {
      output = Core.e_constdef;
    }
    return output;
  }

  // vx_copy(generic_any_1, args...)
  public static <T extends Core.Type_any> T vx_copy(
    final T copyval,
    final Object... values) {
    Core.Type_any value = copyval.vx_copy(values);
    T output = Core.f_any_from_any(copyval, value);
    return output;
  }

  // vx_empty(generic_any_1)
  @SuppressWarnings("unchecked")
  public static <T extends Core.Type_any> T vx_empty(final T type) {
    T output = (T)(type.vx_empty());
    return output;
  }

  // vx_type(generic_any_1)
  @SuppressWarnings("unchecked")
  public static <T extends Core.Type_any> T vx_type(final T type) {
    T output = (T)(type.vx_type());
    return output;
  }

  public static <T> CompletableFuture<T> vx_async_new_from_value(final T val) {
    CompletableFuture<T> output = CompletableFuture.completedFuture(val);
    return output;
  }

  public static <T extends Core.Type_any, U extends Core.Type_any> CompletableFuture<T> vx_async_from_async(
    final T generic_any_1,
    final CompletableFuture<U> future) {
    CompletableFuture<T> output = future.thenApply(val -> {
      return Core.f_any_from_any(generic_any_1, val);
    });
    return output;
  }

  public static <T, U> CompletableFuture<T> vx_async_from_async_fn(
    final CompletableFuture<U> future,
    final Function<? super U,
    ? extends T> fn) {
    CompletableFuture<T> output = future.thenApply(fn);
    return output;
  }

  public static <T> CompletableFuture<List<T>> vx_async_arraylist_from_arraylist_async(
    final List<CompletableFuture<T>> list_future) {
    CompletableFuture<Void> allFutures = CompletableFuture.allOf(
      list_future.toArray(new CompletableFuture[list_future.size()])
    );
    CompletableFuture<List<T>> output = allFutures.thenApply(v -> {
      List<T> list = list_future.stream()
        .map(future -> future.join())
        .collect(Collectors.toList());
      return Core.immutablelist(list);
    });
    return output;
  }

  // vx_any_first_from_list_fn(generic_any_1, list, fn_any)
  public static <T extends Core.Type_any> T vx_any_first_from_list_fn(
    final T generic_any_1,
    final Core.Type_list list,
    final Function<Core.Type_any, T> fn_any
  ) {
    T empty = Core.f_empty(generic_any_1);
    T output = empty;
    List<Core.Type_any> listany = list.vx_list();
    for (Core.Type_any any : listany) {
      T tany = Core.f_any_from_any(generic_any_1, any);
      T value = fn_any.apply(tany);
      if (value == null) {
      } else if (value == empty) {
      } else {
        output = value;
        break;
      }
    }
    return output;
  }

  // vx_any_from_func(generic_any_1, func, args...)
  public static <T extends Core.Type_any> T vx_any_from_func(final T generic_any_1, final Core.Type_replfunc func, final Core.Type_any... args) {
    Core.Type_anylist anylist = Core.vx_new_anylist(args);
    Core.Type_any val = func.vx_repl(anylist);
    T output = Core.f_any_from_any(generic_any_1, val);
    return output;
  }

  // vx_any_from_list_start_reduce(any-1, list-2, any-1, any<-reduce)
  public static <T extends Core.Type_any, N extends Core.Type_list> T vx_any_from_list_start_reduce(T generic_any_1, N list, T valstart, Core.Func_any_from_reduce fn_reduce) {
    T output = valstart;
    List<Core.Type_any> listval = list.vx_list();
    for (Core.Type_any item : listval) {
      output = fn_reduce.vx_any_from_reduce(generic_any_1, output, item);
    }
    return output;
  }

  // vx_any_from_map(generic_any_1, map, string)
  public static <T extends Core.Type_any> T vx_any_from_map(T generic_any_1, Core.Type_map valuemap, Core.Type_string key) {
    T output = Core.f_empty(generic_any_1);
    String skey = key.vx_string();
    if (skey.startsWith(":")) {
      skey = skey.substring(1);
    }
    Core.Type_any val = valuemap.vx_map().getOrDefault(skey, output);
    output = Core.f_any_from_any(generic_any_1, val);
    return output;
  }

  // vx_any_from_map_start_reduce(any-1, map-2, any-1, any<-any-key-value)
  public static <T extends Core.Type_any, N extends Core.Type_map> T vx_any_from_map_start_reduce(T generic_any_1, N map, T start, Core.Func_any_from_any_key_value fn_reduce) {
    T output = start;
    Map<String, Core.Type_any> mapval = map.vx_map();
    Set<String> keys = mapval.keySet();
    for (String skey : keys) {
      Core.Type_string key = Core.vx_new_string(skey);
      Core.Type_any value = mapval.get(skey);
      output = fn_reduce.vx_any_from_any_key_value(generic_any_1, output, key, value);
    }
    return output;
  }

  // vx_boolean_from_string_ends(string, string)
  public static boolean vx_boolean_from_string_ends(String text, String ends) {
    return text.endsWith(ends);
  }

  // vx_boolean_from_string_find(string, string)
  public static boolean vx_boolean_from_string_find(String text, String find) {
    return text.contains(find);
  }

  // vx_boolean_from_string_starts(string, string)
  public static boolean vx_boolean_from_string_starts(String text, String starts) {
    return text.startsWith(starts);
  }

  // vx_boolean_write_from_map_name_value(map, string, any)
  public static Core.Type_boolean vx_boolean_write_from_map_name_value(final Core.Type_map valuemap, final Core.Type_string name, final Core.Type_any value) {
    return valuemap.vx_set(name, value);
  }

  // vx_eqeq(any, any)
  public static boolean vx_eqeq(Core.Type_any val1, Core.Type_any val2) {
    boolean output = false;
    if (val1 == val2) {
      output = true;
    } else if (val1.vx_msgblock() != Core.e_msgblock) {
    } else if (val2.vx_msgblock() != Core.e_msgblock) {
    } else {
      Core.Type_any type1 = val1.vx_type();
      Core.Type_any type2 = val2.vx_type();
      if (type1 != type2) {
      } else if (type1 == Core.t_int) {
        Core.Type_int valint1 = (Core.Type_int)val1;
        Core.Type_int valint2 = (Core.Type_int)val2;
        if (valint1.vx_int() == valint2.vx_int()) {
          output = true;
        }
      } else if (type1 == Core.t_float) {
        Core.Type_float valfloat1 = (Core.Type_float)val1;
        Core.Type_float valfloat2 = (Core.Type_float)val2;
        if (valfloat1.vx_float() == valfloat2.vx_float()) {
          output = true;
        }
      } else if (type1 == Core.t_decimal) {
        Core.Type_decimal valdecimal1 = (Core.Type_decimal)val1;
        Core.Type_decimal valdecimal2 = (Core.Type_decimal)val2;
        if (valdecimal1.vx_string() == valdecimal2.vx_string()) {
          output = true;
        }
      } else if (type1 == Core.t_string) {
        Core.Type_string valstring1 = (Core.Type_string)val1;
        Core.Type_string valstring2 = (Core.Type_string)val2;
        if (valstring1.vx_string() == valstring2.vx_string()) {
          output = true;
        }
      }
    }
    return output;
  }

  // vx_float_from_number(number)
  public static float vx_float_from_number(Core.Type_number num) {
    float output = 0;
    Core.Type_any type = num.vx_type();
    if (type == Core.t_float) {
      Core.Type_float floatval = Core.f_any_from_any(Core.t_float, num);
      output = floatval.vx_float();
    } else if (type == Core.t_int) {
      Core.Type_int intval = Core.f_any_from_any(Core.t_int, num);
      output = intval.vx_int();
    } else if (type == Core.t_decimal) {
      Core.Type_decimal decval = Core.f_any_from_any(Core.t_decimal, num);
      output = decval.vx_float();
    }
    return output;
  }

  // vx_float_from_string(string)
  public static float vx_float_from_string(String text) {
    float output = 0;
    try {
      output = Float.parseFloat(text);
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_global_package_set(string, map<any>, map<any>, map<func>)
  public static void vx_global_package_set(String pkgname, Map<String, Core.Type_any> maptype, Map<String, Core.Type_any> mapconst, Map<String, Core.Type_func> mapfunc) {
    Core.Class_typemap typemap = new Core.Class_typemap();
    typemap.vx_p_map = Core.immutablemap(maptype);
    Core.Class_constmap constmap = new Core.Class_constmap();
    constmap.vx_p_map = Core.immutablemap(mapconst);
    Core.Class_funcmap funcmap = new Core.Class_funcmap();
    funcmap.vx_p_map = Core.immutablemap(mapfunc);
    Core.Class_project global = (Core.Class_project)Core.c_global;
    Core.Class_packagemap packagemap = (Core.Class_packagemap)global.vx_p_packagemap;
    if (packagemap == null) {
      packagemap = new Core.Class_packagemap();
      global.vx_p_packagemap = packagemap;
    }
    Map<String, Core.Type_package> mappackage = new LinkedHashMap<>(packagemap.vx_p_map);
    Core.Class_package pkg = new Core.Class_package();
    pkg.vx_p_constmap = constmap;
    pkg.vx_p_typemap = typemap;
    pkg.vx_p_funcmap = funcmap;
    mappackage.put(pkgname, pkg);
    packagemap.vx_p_map = Core.immutablemap(mappackage);
  }

  public static <T extends Core.Type_any> T vx_if_2(final T generic_any_1, final Core.Type_thenelselist thenelselist) {
    T output = Core.f_empty(generic_any_1);
    Core.Func_any_from_func fn_any = Core.vx_any_first_from_list_fn(Core.t_any_from_func, thenelselist, (any) -> {
      Core.Func_any_from_func fnany = null;
      if (any instanceof Core.Type_thenelse) {
        Core.Type_thenelse thenelse = (Core.Type_thenelse)any;
        Core.Type_string code = thenelse.code();
        switch (code.vx_string()) {
        case ":then":
          Core.Func_boolean_from_func fn_cond = thenelse.fn_cond();
          Core.Type_boolean cond = fn_cond.vx_boolean_from_func();
          if (cond.vx_boolean() == true) {
            fnany = thenelse.fn_any();
          }
          break;
        case ":else":
          fnany = thenelse.fn_any();
          break;
        }
      }
      return fnany;
    });
    if (fn_any != null) {
      output = fn_any.vx_any_from_func(generic_any_1);
    }
    return output;
  }

  // vx_int_from_string(string)
  public static int vx_int_from_string(String text) {
    int output = 0;
    try {
      output = Integer.parseInt(text);
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_is_float(string)
  public static boolean vx_is_float(String text) {
    boolean output = false;
    try {
      Float.parseFloat(text);
      output = true;
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_is_float(any)
  public static boolean vx_is_float(Core.Type_any value) {
    boolean output = false;
    if (value instanceof Core.Type_number) {
      output = true;
    } else if (value instanceof Core.Type_string) {
      Core.Type_string valuestring = (Core.Type_string)value;
      output = Core.vx_is_float(valuestring.vx_string());
    }
    return output;
  }

  // vx_is_int(string)
  public static boolean vx_is_int(String text) {
    boolean output = false;
    switch (text) {
    case "notanumber":
    case "infinity":
    case "neginfinity":
      output = true;
      break;
    default:
      try {
        Integer.parseInt(text);
        output = true;
      } catch (Exception e) {
      }
      break;
    }
    return output;
  }

  // vx_is_int(any)
  public static boolean vx_is_int(Core.Type_any value) {
    boolean result = false;
    if (value == Core.c_infinity) {
      result = true;
    } else if (value == Core.c_neginfinity) {
      result = true;
    } else if (value == Core.c_notanumber) {
      result = true;
    } else if (value instanceof Core.Type_int) {
      result = true;
    } else if (value instanceof Core.Type_float) {
      Core.Type_float valfloat = (Core.Type_float)value;
      float floatval = valfloat.vx_float();
      if ((int)floatval == floatval) {
        result = true;
      }
    } else if (value instanceof Core.Type_decimal) {
      Core.Type_decimal valdec = (Core.Type_decimal)value;
      String strval = valdec.vx_string();
      try {
        if (Integer.parseInt(strval) == Float.parseFloat(strval)) {
          result = true;
        }
      } catch (Exception ex) {
      }
    } else if (value instanceof Core.Type_string) {
      Core.Type_string valstr = (Core.Type_string)value;
      String strval = valstr.vx_string();
      result = vx_is_int(strval);
    }
    return result;
  }

public static <X extends Core.Type_list, Y extends Core.Type_list> CompletableFuture<X> vx_list_from_list_async(
    final X generic_list_1,
    final Y values,
    final Core.Func_any_from_any_async fn_any_from_any_async) {
    List<Core.Type_any> list_value = values.vx_list();
    List<CompletableFuture<Core.Type_any>> list_async_result = Core.arraylist_from_arraylist_fn(list_value, (val) -> {
      return fn_any_from_any_async.vx_any_from_any_async(generic_list_1, val);
    });
    CompletableFuture<List<Core.Type_any>> async_list_result = Core.vx_async_arraylist_from_arraylist_async(list_async_result);
    CompletableFuture<X> output = Core.vx_async_from_async_fn(async_list_result, (list_result) -> {
      X work = Core.f_any_from_any(generic_list_1, generic_list_1.vx_new(list_result));
      return work;
    });
    return output;
  }

  // vx_list_from_list_intany(generic_list_1, list-2, any<-int-any)
  public static <T extends Core.Type_list, U extends Core.Type_list> T vx_list_from_list_intany(T generic_list_1, U valuelist, Core.Func_any_from_int_any fn_any_from_int_any) {
    T output = Core.f_empty(generic_list_1);
    List<Core.Type_any> listany = valuelist.vx_list();
    if (listany.size() > 0) {
      List<Core.Type_any> listout = new ArrayList<Core.Type_any>();
      for (int i = 0; i < listany.size(); i++) {
        Core.Type_int vali = Core.vx_new_int(i+1);
        Core.Type_any value = listany.get(i);
        Core.Type_any outval = fn_any_from_int_any.vx_any_from_int_any(Core.t_any, vali, value);
        listout.add(outval);
      }
      output = Core.vx_new_list(generic_list_1, listout);
    }
    return output;
  }

  // vx_log(object...)
  public static void vx_log(Object... values) {
    for (Object value : values) {
      String text = "";
      if (value == null) {
        text = "null";
      } else if (value instanceof Core.Type_string) {
        Core.Type_string valstring = (Core.Type_string)value;
        text = valstring.vx_string();
      } else if (value instanceof Core.Type_any) {
        Core.Type_any valany = (Core.Type_any)value;
        Core.Type_string valstring = Core.f_string_from_any(valany);
        text = valstring.vx_string();
      } else {
        text = value.toString();
      }
      System.out.println(text);
    }
  }

  // vx_map_from_list_fn(generic_map, list, fn_any_from_key_value)
  public static <T> Map<String, T> vx_map_from_list_fn(final List<T> listval, final Function<T, Core.Type_string> fn_any_from_any) {
    Map<String, T> output = new LinkedHashMap<>();
    for (T val : listval) {
      Core.Type_string valkey = fn_any_from_any.apply(val);
      String key = valkey.vx_string();
      output.put(key, val);
    }
    return output;
  }

  // vx_map_from_map_fn(generic_map, map, fn_any_from_key_value)
  public static <T extends Core.Type_map> T vx_map_from_map_fn(
    T generic_map_1,
    Core.Type_map valuemap,
    Core.Func_any_from_key_value fn_any_from_key_value) {
    T output = Core.f_empty(generic_map_1);
    Map<String, Core.Type_any> mapvalue = valuemap.vx_map();
    if (mapvalue.size() > 0) {
      Core.Type_typedef typedef = Core.f_typedef_from_any(
        generic_map_1
      );
      Core.Type_typelist allowtypes = Core.f_allowtypes_from_typedef(
        typedef
      );
      List<Core.Type_any> lallowtypes = allowtypes.vx_list();
      Set<String> keys = mapvalue.keySet();
      Map<String, Core.Type_any> mapnew = new LinkedHashMap<>();
      for (String key : keys) {
        Core.Type_any value = mapvalue.get(key);
        Core.Type_string stringkey = Core.vx_new_string(key);
        Core.Type_any chgvalue = fn_any_from_key_value.vx_any_from_key_value(
          Core.t_any, stringkey, value
        );
        Core.Type_any chgtype = chgvalue.vx_type();
        if (lallowtypes.contains(chgtype)) {
          mapnew.put(key, chgvalue);
        }
      }
      output = Core.vx_new_map(
        generic_map_1, mapnew
      );
    }
    return output;
  }

  // vx_msg_from_error
  public static Type_msg vx_msg_from_error(
    final String text) {
    Class_msg output = new Class_msg();
    output.vx_p_text = Core.vx_new_string(text);
    output.vx_p_severity = Core.c_msg_severe;
    return output;
  }

  // vx_msg_from_error
  public static Type_msg vx_msg_from_error(
    final String path,
    final String code,
    final Core.Type_any detail) {
    Class_msg output = new Class_msg();
    output.vx_p_path = Core.vx_new_string(path);
    output.vx_p_code = Core.vx_new_string(code);
    output.vx_p_detail = detail;
    output.vx_p_severity = Core.c_msg_severe;
    return output;
  }

  // vx_msg_from_exception
  public static Type_msg vx_msg_from_exception(
    final String path,
    final Exception err) {
    Class_msg output = new Class_msg();
    output.vx_p_path = Core.vx_new_string(path);
    output.vx_p_code = Core.vx_new_string("exception");
    output.vx_p_severity = Core.c_msg_severe;
    output.err = err;
    Core.vx_log(output);
    return output;
  }

  // vx_msgblock_from_copy_arrayval(msgblock, any...)
  public static Core.Type_msgblock vx_msgblock_from_copy_arrayval(
    final Core.Type_any copy,
    final Object... vals) {
    Core.Type_msgblock output = Core.e_msgblock;
    Core.Type_msgblock copymsgblock = copy.vx_msgblock();
    if (copymsgblock != Core.e_msgblock) {
      output = copymsgblock;
    }
    return output;
  }

  // vx_msgblock_from_copy_listval(msgblock, List<any>)
  public static Core.Type_msgblock vx_msgblock_from_copy_listval(final Core.Type_msgblock msgblock, Core.Type_any... vals) {
    Core.Type_msgblock output = Core.e_msgblock;
    List<Core.Type_msgblock> listmsgblock = new ArrayList<>();
    if (msgblock == null) {
    } else if (msgblock == Core.e_msgblock) {
    } else {
      Core.Type_msgblock origmsgblock = msgblock.vx_msgblock();
      if (origmsgblock != Core.e_msgblock) {
        List<Core.Type_msgblock> origlistmsgblock = origmsgblock.msgblocks().vx_listmsgblock();
        listmsgblock.addAll(origlistmsgblock);
      }
    }
    for (Core.Type_any subval : vals) {
      Core.Type_msgblock submsgblock = subval.vx_msgblock();
      if (submsgblock != Core.e_msgblock) {
        listmsgblock.add(submsgblock);
      }
    }
    if (listmsgblock.size() > 0) {
      Core.Class_msgblocklist msgblocks;
      msgblocks = new Core.Class_msgblocklist();
      msgblocks.vx_p_list = listmsgblock;
      Core.Class_msgblock outputclass = new Core.Class_msgblock();
      outputclass.vx_p_msgblocks = msgblocks;
      output = outputclass;
    } else if (msgblock == null) {
    } else if (msgblock == Core.e_msgblock) {
    } else {
      output = msgblock;
    }
    return output;
  }

  public static Type_anylist vx_new_anylist(
    Core.Type_any... anys) {
    List<Core.Type_any> listany = new ArrayList<>(Arrays.asList(anys));
    return vx_new_anylist(listany);
  }

  public static Type_anylist vx_new_anylist(
    List<Type_any> listany) {
    Class_anylist output = new Class_anylist();
    output.vx_p_list = immutablelist(listany);
    return output;
  }

  public static Type_boolean vx_new_boolean(
    final boolean isval) {
    Type_boolean output = Core.c_false;
    if (isval) {
      output = Core.c_true;
    }
    return output;
  }

  public static Core.Type_decimal vx_new_decimal(
    final String text) {
    Core.Type_decimal output;
    if ((text.equals("0") || text.equals("0.0")) && Core.e_decimal != null) {
      output = Core.e_decimal;
    } else {
      Core.Class_decimal work = new Core.Class_decimal();
      work.vxdecimal = text;
      output = work;
    }
    return output;
  }

  public static Type_float vx_new_float(
    final float fval) {
    Class_float output = new Core.Class_float();
    output.vxfloat = fval;
    return output;
  }

  public static Type_int vx_new_int(
    final int ival) {
    Type_int output;
    if ((ival == 0) && Core.e_int != null) {
      output = Core.e_int;
    } else {
      Class_int work = new Core.Class_int();
      work.vxint = ival;
      output = work;

    }
    return output;
  }

  // vx_new_list(T, List<any>)
  public static <T extends Core.Type_list> T vx_new_list(
    T generic_list_1,
    List<Core.Type_any> listval) {
    Core.Type_any anylist = generic_list_1.vx_new(listval);
    T output = Core.f_any_from_any(generic_list_1, anylist);
    return output;
  }

  // vx_new_map(T, Map<string, any>)
  public static <T extends Core.Type_map> T vx_new_map(
    T generic_map_1,
    Map<String, Core.Type_any> mapval) {
    Core.Type_any anymap = generic_map_1.vx_new_from_map(mapval);
    T output = Core.f_any_from_any(generic_map_1, anymap);
    return output;
  }

  public static Type_string vx_new_string(
    final String text) {
    Type_string output;
    if (text.equals("") && Core.e_string != null) {
      output = Core.e_string;
    } else {
      Class_string work = new Core.Class_string();
      work.vxstring = text;
      output = work;
    }
    return output;
  }

  public static String vx_string_from_any(
    Core.Type_any value) {
    return vx_string_from_any_indent(value, 0, false);
  }

  public static String vx_string_from_any_indent(
    Core.Type_any value,
    int indent,
    boolean linefeed) {
    String indenttext = " ".repeat(indent);
    String output = "";
    if (indent > 50) {
      output = "Error: Max Depth Exceeded";
    } else if (value == null) {
      output = "null";
    } else if (value == value.vx_type()) {
      if (value instanceof Core.Type_func) {
        Core.Type_func valuefunc = (Core.Type_func)value;
        Core.Type_funcdef funcdef = valuefunc.vx_funcdef();
        output = funcdef.pkgname().vx_string() + "/" + funcdef.name().vx_string();
      } else {
        Core.Type_typedef typedef = value.vx_typedef();
        output = typedef.pkgname().vx_string() + "/" + typedef.name().vx_string();
      }
    } else if (value instanceof Core.Type_boolean) {
      Core.Type_boolean valbool = Core.f_any_from_any(Core.t_boolean, value);
      if (valbool.vx_boolean() == true) {
        output = "true";
      } else {
        output = "false";
      }
    } else if (value instanceof Core.Type_decimal) {
      Core.Type_decimal valdec = Core.f_any_from_any(Core.t_decimal, value);
      output = valdec.vx_string();
    } else if (value instanceof Core.Type_float) {
      Core.Type_float valfloat = Core.f_any_from_any(Core.t_float, value);
      output = Float.toString(valfloat.vx_float());
      if (output.endsWith(".0")) {
        output = output.substring(0, output.length() - 2);
      }
    } else if (value instanceof Core.Type_int) {
      if (value == Core.c_notanumber) {
        output = "notanumber";
      } else if (value == Core.c_infinity) {
        output = "infinity";
      } else if (value == Core.c_neginfinity) {
        output = "neginfinity";
      } else {
        Core.Type_int valint = Core.f_any_from_any(Core.t_int, value);
        output = Integer.toString(valint.vx_int());
      }
    } else if (value instanceof Core.Type_string) {
      Core.Type_string valstring = Core.f_any_from_any(Core.t_string, value);
      String sval = valstring.vx_string();
      if (sval.indexOf("\"") < 0) {
        sval = "\"" + sval + "\"";
      } else {
        sval = "`" + sval + "`";
      }
      if (valstring.vx_msgblock() != Core.e_msgblock) {
        String msgtext = Core.vx_string_from_any_indent(valstring.vx_msgblock(), indent, linefeed);
        output  = "\n" + indenttext + "(string";
        output += "\n" + indenttext + " " + sval;
        output += "\n" + indenttext + " " + msgtext + ")";
      } else {
        output = sval;
      }
    } else if (value.vx_constdef() != Core.e_constdef) {
      Core.Type_constdef constdef = value.vx_constdef();
      String constpkg = constdef.pkgname().vx_string();
      String constname = constdef.name().vx_string();
      if (constpkg.equals("vx/core")) {
        output = constname;
      } else {
        output = constpkg + "/" + constname;
      }
    } else if (value instanceof Core.Type_list) {
      Core.Type_list vallist = Core.f_any_from_any(Core.t_list, value);
      Core.Type_typedef typedef = vallist.vx_typedef();
      Core.Type_string typedefname = typedef.name();
      String stypedefname = typedefname.vx_string();
      int indentint = indent + 1;
      List<Core.Type_any> listval = vallist.vx_list();
      for (Core.Type_any valsub : listval) {
        String valtext = Core.vx_string_from_any_indent(valsub, indentint, linefeed);
        output += "\n " + indenttext + valtext;
      }
      if (vallist.vx_msgblock() != Core.e_msgblock) {
        String msgtext = Core.vx_string_from_any_indent(vallist.vx_msgblock(), indent, linefeed);
        output += "\n" + indenttext + msgtext;
      }
      output = "(" + stypedefname + output + ")";
    } else if (value instanceof Core.Type_map) {
      Core.Type_map valmap = Core.f_any_from_any(Core.t_map, value);
      Core.Type_typedef typedef = valmap.vx_typedef();
      Core.Type_string typedefname = typedef.name();
      String stypedefname = typedefname.vx_string();
      int indentint = indent + 2;
      Map<String, Core.Type_any> mapval = valmap.vx_map();
      Set<String> keys = mapval.keySet();
      for (String key : keys) {
        Core.Type_any valsub = mapval.get(key);
        if (key.indexOf(" ") >= 0) {
          key = "\"" + key + "\"";
        } else if (!key.startsWith(":")) {
          key = ":" + key;
        }
        String strval = Core.vx_string_from_any_indent(
          valsub, indentint, linefeed
        );
        if (strval.contains("\n")) {
          strval = "\n  " + indenttext + strval;
        } else {
          strval = " " + strval;
        }
        output += "\n" + indenttext + " " + key + strval;
      }
      if (valmap.vx_msgblock() != Core.e_msgblock) {
        String msgtext = Core.vx_string_from_any_indent(
          valmap.vx_msgblock(), indent+1, linefeed
        );
        output += "\n " + indenttext + msgtext;
      }
      output = "(" + stypedefname + output + ")";
    } else if (value instanceof Core.Type_struct) {
      Core.Type_struct valstruct = Core.f_any_from_any(
        Core.t_struct, value
      );
      Core.Type_typedef typedef = valstruct.vx_typedef();
      Core.Type_string typedefname = typedef.name();
      String stypedefname = typedefname.vx_string();
      int indentint2 = indent;
      indentint2 += 2;
      Map<String, Core.Type_any> mapval2 = valstruct.vx_map();
      Set<String> keys2 = mapval2.keySet();
      for (String key : keys2) {
        Core.Type_any valsub2 = mapval2.get(key);
        if (!Core.f_is_empty_1(valsub2).vx_boolean()) {
          if (!key.startsWith(":")) {
            key = ":" + key;
          }
          String strval2 = Core.vx_string_from_any_indent(
            valsub2, indentint2, linefeed
          );
          if (strval2.contains("\n")) {
            strval2 = "\n  " + indenttext + strval2;
          } else {
            strval2 = " " + strval2;
          }
          output += "\n" + indenttext + " " + key + strval2;
        }
      }
      if (stypedefname == "msg") {
      } else if (stypedefname == "msgblock") {
      } else if (valstruct.vx_msgblock() != Core.e_msgblock) {
        String msgtext2 = Core.vx_string_from_any_indent(
          valstruct.vx_msgblock(), indent+1, linefeed
        );
        output += "\n " + indenttext + msgtext2;
      }
      output = "(" + stypedefname + output + ")";
    } else if (value instanceof Core.Type_func) {
      Core.Type_func valfunc = Core.f_any_from_any(Core.t_func, value);
      Core.Type_funcdef funcdef = valfunc.vx_funcdef();
      Core.Type_string funcdefname = Core.f_funcname_from_funcdef(funcdef);
      output = funcdefname.vx_string();
      if (valfunc.vx_msgblock() != Core.e_msgblock) {
        String msgtext = Core.vx_string_from_any_indent(
          valfunc.vx_msgblock(), indent, linefeed
        );
        output += "\n" + indenttext + msgtext;
      }
      output = "(" + output + ")";
    }
    return output;
  }

  public static Core.Type_string vx_string_from_any_indent(
    Core.Type_any value,
    Core.Type_int indent,
    Core.Type_boolean linefeed
  ) {
    String soutput = Core.vx_string_from_any_indent(
      value, indent.vx_int(), linefeed.vx_boolean()
    );
    Core.Type_string output = Core.vx_new_string(soutput);
    return output;
  }

  // vx_string_from_string_find_replace(string, string, string)
  public static String vx_string_from_string_find_replace(
    String text,
    String find,
    String replace
  ) {
    String output = text.replaceAll(find, replace);
    return output;
  }

  // vx_string_from_string_find_replace(string, string, string)
  public static Core.Type_string vx_string_from_string_find_replace(
    Core.Type_string text,
    Core.Type_string find,
    Core.Type_string replace
  ) {
    String stext = Core.vx_string_from_string_find_replace(
      text.vx_string(), find.vx_string(), replace.vx_string()
    );
    Core.Type_string output = Core.vx_new_string(stext);
    return output;
  }

  public static String vx_string_from_string_start_end(
    String text,
    int start,
    int end
  ) {
    String output = "";
    int maxlen = text.length();
    if (end < 0) {
     end += maxlen;
    }
    if (start < 1) {
    } else if (start > end) {
    } else if (start > maxlen) {
    } else {
      if (end > maxlen) {
        end = maxlen;
      }
      output = text.substring(start - 1, end);
    }
    return output;
  }

  public static Core.Type_typedef typedef_new(
    String pkgname,
    String name,
    String extend,
    Core.Type_typelist traits,
    Core.Type_typelist allowtypes,
    Core.Type_typelist disallowtypes,
    Core.Type_funclist allowfuncs,
    Core.Type_funclist disallowfuncs,
    Core.Type_anylist allowvalues,
    Core.Type_anylist disallowvalues,
    Core.Type_argmap properties
  ) {
    Core.Class_typedef output = new Core.Class_typedef();
    output.vx_p_pkgname = Core.vx_new_string(pkgname);
    output.vx_p_name = Core.vx_new_string(name);
    output.vx_p_extend = Core.vx_new_string(extend);
    output.vx_p_traits = traits;
    output.vx_p_allowtypes = allowtypes;
    output.vx_p_disallowtypes = disallowtypes;
    output.vx_p_allowfuncs = disallowfuncs;
    output.vx_p_disallowfuncs = disallowfuncs;
    output.vx_p_allowvalues = disallowvalues;
    output.vx_p_disallowvalues = disallowvalues;
    output.vx_p_properties = properties;
    return output;
  }

  public static Core.Type_anylist vx_anylist_from_arraystring(
    String... arraystring
  ) {
    List<Object> listany = new ArrayList<>();
    for (String svalue : arraystring) {
      Core.Type_string value = Core.vx_new_string(svalue);
      listany.add(value);
    }
    Object[] arrayany = listany.toArray();
    Core.Type_anylist output = Core.vx_new(Core.t_anylist, arrayany);
    return output;
  }

  // Warning!: Blocking
  public static <T extends Core.Type_any> T vx_sync_from_async(
    final T generic_any_1,
    final CompletableFuture<T> future
  ) {
    T output = Core.f_empty(generic_any_1);
    try {
      output = future.get();
    } catch (Exception e) {
      Core.Type_msg msg = Core.vx_msg_from_exception("sync<-async", e);
      Core.Type_any val = generic_any_1.vx_new(msg);
      output = Core.f_any_from_any(generic_any_1, val);
    }
    return output;
  }
