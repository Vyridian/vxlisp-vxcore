// :headerfirst
// :headertype
// :headerfunc
// :header

  vx_core::Type_boolean vx_boolean_exists_from_file(vx_data_file::Type_file file);

  vx_core::Type_boolean vx_boolean_write_from_file_string(vx_data_file::Type_file file, vx_core::Type_string text);

  vx_core::Type_boolean vx_boolean_write_from_path_text(std::string path, std::string text);

  vx_core::Type_string vx_string_read_from_file(vx_data_file::Type_file file);

  vx_core::Type_string vx_string_read_from_path(std::string path);

  vx_core::Type_string vx_pathcurrent_from_os();

// :body

  vx_core::Type_boolean vx_boolean_exists_from_file(
    vx_data_file::Type_file file) {
    vx_core::Type_boolean output = vx_core::c_false;
    vx_core::Type_string path = vx_data_file::f_pathfull_from_file(file);
    std::string spath = path->vx_string();
    vx_core::vx_release(path);
    std::ifstream f(spath);
    if (f.good()) {
      output = vx_core::c_true;
    }
    return output;
 }

  vx_core::Type_boolean vx_boolean_write_from_file_string(
    vx_data_file::Type_file file,
    vx_core::Type_string text) {
    vx_core::Type_boolean output = vx_core::c_false;
    vx_core::Type_string path = vx_data_file::f_pathfull_from_file(file);
    std::string spath = path->vx_string();
    std::string stext = text->vx_string();
    vx_core::vx_release({text, path});
    output = vx_data_file::vx_boolean_write_from_path_text(spath, stext);
    return output;
 }

  vx_core::Type_boolean vx_boolean_write_from_path_text(
    std::string path,
    std::string text) {
    vx_core::Type_boolean output = vx_core::c_false;
    std::ofstream filestream(path, std::ios_base::binary | std::ios_base::out);
    if (filestream.is_open()) {
      filestream << text;
      filestream.close();
      output = vx_core::c_true;
    } else {
      vx_core::Type_msg msg = vx_core::vx_msg_from_errortext("File not found:" + path);
      output = vx_core::vx_copy(vx_core::c_false, {msg});
    }
    return output;
  }

  vx_core::Type_string vx_string_read_from_file(
    vx_data_file::Type_file file) {
    vx_core::Type_string output = vx_core::e_string;
    vx_core::Type_string path = vx_data_file::f_pathfull_from_file(file);
    std::string spath = path->vx_string();
    vx_core::vx_release(path);
    output = vx_data_file::vx_string_read_from_path(spath);
    return output;
  }

  vx_core::Type_string vx_string_read_from_path(
    std::string path) {
    vx_core::Type_string output = vx_core::e_string;
    std::ifstream filestream(path);
    if (filestream.is_open()) {
      bool isfirst = true;
      std::string text;
      std::string line;
      while (std::getline(filestream, line)) {
        if (isfirst) {
          text = line;
          isfirst = false;
        } else {
          text += "\n" + line;
        }
      }
      filestream.close();
      output = vx_core::vx_new_string(text);
    } else {
      vx_core::Type_msg msg = vx_core::vx_msg_from_errortext("File not found:" + path);
      output = vx_core::vx_new(vx_core::t_string, {msg});
    }
    return output;
  }

  vx_core::Type_string vx_pathcurrent_from_os() {
    vx_core::Type_string output = vx_core::e_string;
    std::string path = std::filesystem::current_path().string();
    output = vx_core::vx_new_string(path);
    return output;
  }
