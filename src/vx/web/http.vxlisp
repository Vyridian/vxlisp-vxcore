(package vx/web/http
 :libs (lib csv :path vx/data/csv)
       (lib tb  :path vx/data/textblock)
       (lib xml :path vx/data/xml)
       (lib javafuture)
 :doc "Http library")

(type response : struct
 :properties
  [ok     : boolean
   status : int])

(func csv<-httpget : csv :async
 [url : string]
 (let
  [textblock : tb/textblock := (textblock<-httpget url "text/csv")]
  (csv/csv<-textblock textblock))
 :clientserver :client
 :doc "Returns a csv file from an httpget")

(func json<-httpget : response
 [url : string]
 (let
  [response : response := (response<-httpget url "application/json")]
  response)
 :async
 :clientserver :client
 :doc "Returns a json response from an httpget")

(func response<-httpget : response
 [url         : string
  contenttype : string]
 (native
  :js
   "fetch(url,
     {mode: 'no-cors',
      method: 'GET',
      headers: {
       'Content-Type': contenttype
      }})")
 :async
 :clientserver :client
 :doc "Returns a response from an httpget")

(func text<-httpget : string
 [url : string]
 (let
  [response : response := (response<-httpget url "text/plain")]
  (text<-response response))
 :async
 :clientserver :client
 :doc "Returns string from an httpget")

(func text<-response : string
 [response : response]
 (native :js "response.text()")
 :clientserver :client
 :doc "Returns a string from a response")

(func textblock<-httpget : tb/textblock :async
 [url         : string
  contenttype : string]
 (let
  [response : response := (response<-httpget url contenttype)]
  (textblock<-response response))
 :clientserver :client
 :doc "Returns a textblock from an httpget")

(func textblock<-response : tb/textblock
 [response : response]
 (tb/textblock :text (text<-response response))
 :clientserver :client
 :doc "Returns a textblock from a response")

(func xml<-httpget : xml :async
 [url : string]
 (let
  [textblock : tb/textblock := (textblock<-httpget url "text/xml")]
  (xml/xml<-textblock textblock))
 :clientserver :client
 :doc "Return Xml from an httpget")
