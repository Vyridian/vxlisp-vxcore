(package vx/repl
 :libs (lib coll :path vx/collection)
       (lib type :path vx/type)
       (lib tb   :path vx/data/textblock)
       (lib javafuture)
 :doc "Read-Evaluate-Print-Loop processor.")

(type liblist : list
 :allowtypes [string]
 :doc "List of library names")

(type repl : struct
 :properties [name     : string
              type     : any
              repllist : repllist
              async    : boolean
              value    : any
              doc      : string]
 :doc "Repl structure")

(type replarglist : struct
 :properties [key      : string
              current  : repl
              repllist : repllist]
 :doc "Builder for a repllist")

(type repllist : list
 :allowtypes [repl]
 :doc "List of repl")

(const delimvxlisp : delim
 (delim
  :name "delimvxlisp"
  :delimlist
   (delimlist
    delimvxlispparen
    delimcomment
    delimcommentblock))
 :doc "vxlisp File Delimiters")

(const delimvxlispbracket : delim
 (copy delimbracketsquare
  :name "delimvxlispbracketsquare"
  :delimlist
   (delimlist
    delimcomment
    delimcommentblock
    delimquote
    delimquoteblock
    delimwhitespace
    delimvxlispparen))
 :doc "vxlisp Square Bracket Delimiters")

(const delimvxlispparen : delim
 (copy delimparen
  :name "delimvxlispparen"
  :delimlist
   (delimlist
    delimcomment
    delimcommentblock
    delimquote
    delimquoteblock
    delimwhitespace
    delimvxlispbracket
    delimvxlispparen))
 :doc "vxlisp Paren Delimiters")

(func any<-liblist-string : any
 [liblist : liblist
  text    : string :doc "Program to run"]
 (let : any
  [repl : repl := (repl<-liblist-string
                   liblist
                   text)]
  (any<-repl repl))
 :context
 :doc "Run an arbitrary program in the REPL.")

(func any<-macro : any-1
 [anylist : anylist :...]
 (let : any-1
  [repl  : repl :=
   (repl<-macro
    anylist)
   value : any :=
    (any<-repl
     repl)]
  (any<-any : any-1
   value))
 :context
 :test (test
        5
        (any<-macro : int
         "(+ "
         (- 7 5)
         " 3)"))
 :doc "A function that joins any number of values into a string and then parses and evaluates it.")

(func any<-repl : any
 [repl : repl]
 (let : any
  [value    : any      := (:value repl)
   repltype : any      := (:type repl)
   repllist : repllist := (:repllist repl)
   args     : anylist  := (anylist<-repllist repllist)]
  (if
   (then (!-empty value) value)
   (then (is-func repltype)
    (any-repl<-functype-args
     repltype
     args))
   (else
    (new repltype args))))
 :context
 :test (test
        "HelloWorld"
        (any<-repl
         (repl
          :type string
          :repllist
           (repllist
            (repl :value "Hello")
            (repl :value "World")
           ))))
       (test
        5
        (any<-repl
         (repl
          :type +
          :repllist
           (repllist
            (repl :value 2)
            (repl :value 3)))))
 :doc "Run an arbitrary program in the REPL.")

(func any<-script : any
 [script : string]
 (let : any
  [textblock : tb/textblock := (textblock<-script script)
   repl      : repl         := (repl<-textblock textblock)]
  (any<-repl repl))
/*
 :test (test
        2
        (any<-script
         "2"))
       (test
        infinity
        (any<-script
         "infinity"))
*/
 :test
       (test
        5
        (any<-script
         "(+ 2 3)"))
 :context
 :sideeffects "Since any code can be run. This is unsafe by nature."
 :doc "Run an arbitrary script.")

(func any-repl<-functype-args : any
 [type : any
  args : anylist]
 (native
  :cpp
   "vx_core::Type_replfunc replfunc = dynamic_cast<vx_core::Type_replfunc>(type);
    output = replfunc->vx_repl(args);"
  :csharp
   "if (type is Core.Type_replfunc replfunc) {
      output = replfunc.vx_repl(args);
    }"
  :java
   "if (type instanceof Core.Type_replfunc) {
      Core.Type_replfunc replfunc = (Core.Type_replfunc)type;
      output = replfunc.vx_repl(args);
    }"
  :js
   "const vxvalue = type['vx_value']
    if (vxvalue != undefined) {
      const fn = vxvalue['fn']
      if (fn != undefined) {
        output = fn(...args)
      }
    }"
  :kotlin
   "if (type is vx_core.Type_replfunc) {
      val replfunc : vx_core.Type_replfunc = type as vx_core.Type_replfunc
      output = replfunc.vx_repl(args)
    }")
 :doc "Returns any from a repl func and args.")

(func anylist<-repllist : anylist
 [repllist : repllist]
 (list<-list : anylist
  repllist
  (fn : any
   [repl : repl]
   (any<-repl repl)))
 :context
 :doc "Run an arbitrary program in the REPL.")

(func replarglist<-replarglist-textblock-argmap : replarglist
 [replargs : replarglist
  tb       : tb/textblock
  argmap   : argmap]
 (let : replarglist
  [key      : string   := (:key replargs)
   current  : repl     := (:current  replargs)
   repllist : repllist := (:repllist replargs)
   currlist : repllist := (:repllist current)
   text     : string   := (:text     textblock)]
  (if : replarglist
   (then
    (= key "")
    (if : replarglist
     (then
      (= text ":")
      (copy replargs
       :key text))
     (then
      (= text ":=")
      (copy replargs
       :key text))
     (then
      (= text ":doc")
      (copy replargs
       :key text))
     (else // new arg
      (copy replargs
       :current
        (repl
         :name text)
       :repllist
        (copy repllist
         current)))))
   (then
    (= key ":")
    (copy replargs
     :key ""
     :current
      (copy current
       :type text)))
   (then
    (= key ":=")
    (copy replargs
     :key ""
     :current
      (copy current
       :repllist
        (copy currlist
         (repl<-textblock-argmap
          tb
          argmap)))))
   (then
    (= key ":doc")
    (copy replargs
     :key ""
     :current
      (copy current
       :doc text)))
   (else replargs)))
 :doc "Returns a modified replarglist from by applying a textblock")

(func argmap<-textblock-argmap : argmap
 [textblock : tb/textblock
  argmap    : argmap]
 (if : argmap
  (!=
   "delimbracketsquare"
   (:name (:delim textblock)))
   argmap
  argmap)
 :doc "Returns an argmap with parsed args from textblock added.")

(func const<-string : any
 [text : string]
 (let : any
  [pkgpos   : int      := (int<-string-findlast
                           text
                           "/")
   pkgname  : string   := (if : string
                           (= 0 pkgpos)
                           "vx/core"
                           (type/string<-string-end
                            text
                            (-1 pkgpos)))
   name     : string   := (if : string
                           (= 0 pkgpos)
                           text
                           (type/string<-string-start
                            text
                            (+1 pkgpos)))
   pkg      : package  := (package-global<-name
                           pkgname)
   constmap : constmap := (:constmap pkg)
   constval : any      := (any<-map
                           constmap
                           name)]
  (if : any
   (!-empty constval)
   constval
   (empty any)))
 :test (test
        infinity
        (const<-string
         "infinity"))
       (test
        tb/delimcomma
        (const<-string
         "vx/data/textblock/delimcomma"))
 :doc "Returns a constant from a fully qualified name.")

(func repl<-liblist-string : repl
 [liblist : liblist
  text    : string :doc "Program to run"]
 :doc "Returns a repl from the given text.")

(func repl<-macro : repl
 [anylist : anylist :...]
 (let : repl
  [textlist : stringlist   := (list<-list : stringlist
                               anylist
                               (fn [item : any] : string
                                (let : string
                                 [typ : any := (type<-any item)]
                                 (switch : string
                                  typ
                                  (case string
                                   (any<-any : string
                                    item))
                                  (else
                                   (string<-any item))))))
   script   : string       := (type/string<-stringlist-join
                               textlist
                               "")
   tb       : tb/textblock := (textblock<-script
                               script)]
  (repl<-textblock tb))
 :context
 :test (test
        (repl
         :type vx/core/+
         :repllist
          (repllist
           (repl
            :value 2)
           (repl
            :value 3)))
        (repl<-macro
         "(+ "
         (- 7 5)
         " 3)"))
 :doc "A function that joins any number of values into a string and then parses it.")

(func repl<-script : repl
 [script : string]
 (let
  [textblock : tb/textblock := (textblock<-script
                                script)]
  (repl<-textblock
   textblock))
 :test (test
        (repl
         :value 2)
        (repl<-script
         "2"))
       (test
        (repl
         :value infinity)
        (repl<-script
         "infinity"))
       (test
        (repl
         :type +)
        (repl<-script
         "+"))
       (test
        (repl
         :type +
         :repllist
          (repllist
           (repl
            :value 2)
           (repl
            :value 3)))
        (repl<-script
         "(+ 2 3)"))
 :doc "Returns a parsed repl from a string")

(func repl<-string-argmap : repl
 [text   : string
  argmap : argmap]
 (if : repl
  (then // if starts and ends quote
   (and
    (type/boolean<-string-starts
     text quote)
    (type/boolean<-string-ends
     text quote))
   (repl
    :value
     (type/string<-string-start-end
      text 2 -1)))
  (then // then if is int
   (is-int text)
   (repl
    :value
     (int<-string
      text)))
  (then // then if is float
   (is-float text)
   (repl
    :value
     (float<-string
      text)))
  (else
   (let : repl
    [arg : any :=
     (any<-map
      argmap text)]
    (if : repl
     (then // if in argmap
      (!-empty arg)
      (repl
       :value arg))
     (else
      (let : repl
       [cnst : any :=
        (const<-string
         text)]
       (if : repl
        (then
         (!-empty cnst)
         (repl
          :value cnst))
        (else
         (let : repl
          [typefunc : any := (typefunc<-string
                              text)]
          (if : repl
           (then
            (!-empty typefunc)
            (repl
             :type typefunc))
           (else // error
            (repl
             (msg<-error
              :repltypenotfound
              text)))))))))))))
 :test (test
        (repl :value "Hello")
        (repl<-string-argmap
         `"Hello"`
         (empty argmap)))
       (test
        (repl
         :value 2)
        (repl<-string-argmap
         "2"
         (empty argmap)))
       (test
        (repl :value 2.3)
        (repl<-string-argmap
         "2.3"
         (empty argmap)))
       (test
        (repl
         :value infinity)
        (repl<-string-argmap
         "infinity"
         (empty argmap)))
       (test
        (repl
         :value tb/delimcomma)
        (repl<-string-argmap
         "vx/data/textblock/delimcomma"
         (empty argmap)))
       (test
        (repl :type string)
        (repl<-string-argmap
         "string"
         (empty argmap)))
       (test
        (repl :type +)
        (repl<-string-argmap
         "+"
         (empty argmap)))
 :doc "Returns a function, type, const or primitive from given string.")

(func repl<-textblock : repl
 [textblock : tb/textblock]
 (repl<-textblock-argmap
  textblock (empty argmap))
 :test (test
        (repl :value 2)
        (repl<-textblock
         (tb/textblock
          :text "2")))
       (test
        (repl :type +)
        (repl<-textblock
         (tb/textblock
          :text "+")))
       (test
        (repl :type +)
        (repl<-textblock
         (tb/textblock
          :text "+")))
       (test
        (repl
         :type +
         :repllist
          (repllist
           (repl :value 2)
           (repl :value 3)))
        (repl<-textblock
         (tb/textblock
          :text "(+ 2 3)"
          :delim
           (copy delimvxlispparen
            :delimlist
             (empty delimlist))
          :children
           (tb/textblocklist
            (tb/textblock
             :text "+")
            (tb/textblock
             :text " "
             :delim
              (copy tb/delimwhitespace
               :pos 0))
            (tb/textblock
             :text "2")
            (tb/textblock
             :text " "
             :delim
              (copy tb/delimwhitespace
               :pos 0))
            (tb/textblock
             :text "3")))))
       (test
        (repl
         :type +
         :repllist
          (repllist
           (repl :value 2)
           (repl :value 3)))
        (repl<-textblock
         (tb/textblock
          :text "(+ 2 3)"
          :children
           (tb/textblocklist
            (tb/textblock
             :text "(+ 2 3)"
             :delim
              (copy delimvxlispparen
               :delimlist
                (empty delimlist))
             :children
              (tb/textblocklist
               (tb/textblock
                :text "+")
               (tb/textblock
                :text " "
                :delim
                 (copy tb/delimwhitespace
                  :pos 0))
               (tb/textblock
                :text "2")
               (tb/textblock
                :text " "
                :delim
                 (copy tb/delimwhitespace
                  :pos 0))
               (tb/textblock
                :text "3")))))))
 :doc "Returns a repl from a parsed textblock")

(func repl<-textblock-argmap : repl
 [textblock : tb/textblock
  argmap    : argmap]
 (let : repl
  [delim     : delim  := (:delim textblock)
   starttext : string := (:starttext delim)]
  (switch : repl
   starttext
   (case ""
    (repl-empty<-textblock-argmap
     textblock
     argmap))
   (case (:starttext tb/delimparen)
    (repl-paren<-textblock-argmap
     textblock
     argmap))
   (case (:starttext tb/delimbracketsquare)
    (repl-bracket<-textblock-argmap
     textblock
     argmap))))
 :test (test
        (repl :value 2)
        (repl<-textblock-argmap
         (tb/textblock
          :text "2")
         (empty argmap)))
       (test
        (repl :type +)
        (repl<-textblock-argmap
         (tb/textblock
          :text "+")
         (empty argmap)))
       (test
        (repl
         :type +
         :repllist
          (repllist
           (repl :value 2)
           (repl :value 3)))
        (repl<-textblock-argmap
         (tb/textblock
          :text "(+ 2 3)"
          :delim
           (copy delimvxlispparen
            :delimlist
             (empty delimlist))
          :children
           (tb/textblocklist
            (tb/textblock
             :text "+")
            (tb/textblock
             :text " "
             :delim
              (copy tb/delimwhitespace
               :pos 0))
            (tb/textblock
             :text "2")
            (tb/textblock
             :text " "
             :delim
              (copy tb/delimwhitespace
               :pos 0))
            (tb/textblock
             :text "3")))
         (empty argmap)))
       (test
        (repl
         :type +
         :repllist
          (repllist
           (repl :value 2)
           (repl :value 3)))
        (repl<-textblock-argmap
         (tb/textblock
          :text "(+ 2 3)"
          :children
           (tb/textblocklist
            (tb/textblock
             :text "(+ 2 3)"
             :delim
              (copy delimvxlispparen
               :delimlist
                (empty delimlist))
             :children
              (tb/textblocklist
               (tb/textblock
                :text "+")
               (tb/textblock
                :text " "
                :delim
                 (copy tb/delimwhitespace
                  :pos 0))
               (tb/textblock
                :text "2")
               (tb/textblock
                :text " "
                :delim
                 (copy tb/delimwhitespace
                  :pos 0))
               (tb/textblock
                :text "3")))))
         (empty argmap)))
 :doc "Returns a repl from a parsed textblock")

(func repl-bracket<-textblock-argmap : repl
 [textblock : tb/textblock
  argmap    : argmap]
 (repl)
/*
 (let : repl
  [childlst : tb/textblocklist := (:children textblock)
   children : tb/textblocklist := (tb/textblocklist<-textblocklist-remove
                                   childlst
                                   tb/delimwhitespace)
   tbname   : tb/textblock     := (:1 children)
   sname    : string           := (:text tbname)
   tbtype   : tb/textblock     := (tb/textblock<-textblocklist-key
                                   children
                                   ":")
   tbvalue  : tb/textblock     := (tb/textblock<-textblocklist-key
                                   children
                                   ":=")
   tbdoc    : tb/textblock     := (tb/textblock<-textblocklist-key
                                   children
                                   ":doc")
   replarg  : repl             := (repl<-string-argmap
                                   "vx/core/arg" argmap)
   repls    : repllist         := (repllist
                                   replarg)
   replargs : repl             := (repl<-string-argmap
                                   "vx/core/arglist" argmap)]
  (copy replargs
   :repllist repls))
 :test (test
        (repl
         :type vx/core/+
         :repllist
          (repllist
           (repl
            :value 2)
           (repl
            :value 3)))
        (repl-bracket<-textblock-argmap
         (tb/textblock
          :text "[value : int := (+ 2 3)]"
          :delim
           (copy delimvxlispbracket
            :delimlist
             (empty delimlist))
          :children
           (tb/textblocklist
            (tb/textblock
             :text "value")
            (tb/textblock
             :text ":")
            (tb/textblock
             :text "int")
            (tb/textblock
             :text ":=")
            (tb/textblock
             :delim
              (copy delimvxlispparen
               :delimlist
                (empty delimlist))
             :children
              (tb/textblocklist
               (tb/textblock
                :text "+")
               (tb/textblock
                :text " "
                :delim
                 (copy tb/delimwhitespace
                  :pos 0))
               (tb/textblock
                :text "2")
               (tb/textblock
                :text " "
                :delim
                 (copy tb/delimwhitespace
                  :pos 0))
               (tb/textblock
                :text "3")))))
         (empty argmap)))*/
 :doc "Returns a repl from a squarebracket parsed textblock")

(func repl-empty<-textblock-argmap : repl
 [textblock : tb/textblock
  argmap    : argmap]
 (let : repl
  [children : tb/textblocklist := (:children textblock)
   len : int := (length children)]
  (switch : repl
   len
   (case 0
    (repl<-string-argmap
     (:text textblock)
     argmap))
   (case 1
    (repl<-textblock-argmap
     (:1 children)
     argmap))
   (else
    (repl
     (msg<-error
      "Empty delim cannot have more than one child.")))))
 :test (test
        (repl :value 2)
        (repl-empty<-textblock-argmap
         (tb/textblock
          :text "2")
         (empty argmap)))
       (test
        (repl :type +)
        (repl-empty<-textblock-argmap
         (tb/textblock
          :text "+")
         (empty argmap)))
       (test
        (repl :value 2)
        (repl-empty<-textblock-argmap
         (tb/textblock
          :text "1"
          :children
           (tb/textblocklist
            (tb/textblock
             :text "2")))
         (empty argmap)))
       (test
        (repl
         (msg<-error "Empty delim cannot have more than one child."))
        (repl-empty<-textblock-argmap
         (tb/textblock
          :text "1"
          :children
           (tb/textblocklist
            (tb/textblock
             :text "2")
            (tb/textblock
             :text "3")))
         (empty argmap)))
 :doc "Returns a repl from an empty delim textblock")

(func repl-paren<-textblock-argmap : repl
 [textblock : tb/textblock
  argmap    : argmap]
 (let : repl
  [childlst : tb/textblocklist := (:children textblock)
   children : tb/textblocklist := (tb/textblocklist<-textblocklist-remove
                                   childlst
                                   tb/delimwhitespace)
   tbfunc   : tb/textblock     := (:1 children)
   sfunc    : string           := (:text tbfunc)
   replfunc : repl             := (repl<-string-argmap
                                   sfunc argmap)
   typefunc : any              := (:type replfunc)
   posarg   : int              := (switch : int
                                   typefunc
                                   (case vx/core/let 3)
                                   (case vx/core/fn  3)
                                   (else 2))
   argmap2  : argmap           := (switch : argmap
                                   typefunc
                                   (case vx/core/let
                                    (argmap<-textblock-argmap
                                     (:3 children)
                                     argmap))
                                   (case vx/core/fn
                                    (argmap<-textblock-argmap
                                     (:3 children)
                                     argmap))
                                   (else argmap))
   tbargs   : tb/textblocklist := (coll/list<-list-start
                                   children posarg)
   replargs : repllist         := (repllist<-textblocklist-argmap
                                   tbargs
                                   argmap)]
  (copy replfunc
   :repllist replargs))
 :test (test
        (repl
         :type vx/core/+
         :repllist
          (repllist
           (repl
            :value 2)
           (repl
            :value 3)))
        (repl-paren<-textblock-argmap
         (tb/textblock
          :text "(+ 2 3)"
          :delim
           (copy delimvxlispparen
            :delimlist
             (empty delimlist))
          :children
           (tb/textblocklist
            (tb/textblock
             :text "+")
            (tb/textblock
             :text " "
             :delim
              (copy tb/delimwhitespace
               :pos 0))
            (tb/textblock
             :text "2")
            (tb/textblock
             :text " "
             :delim
              (copy tb/delimwhitespace
               :pos 0))
            (tb/textblock
             :text "3")))
         (empty argmap)))
 :doc "Returns a repl from a parsed textblock")

(func repllist<-textblocklist-argmap : repllist
 [textblocklist : tb/textblocklist
  argmap        : argmap]
 (list<-list : repllist
  textblocklist
  (fn : repl
   [textblock : tb/textblock]
   (repl<-textblock
    textblock)))
 :doc "Returns a repllist from a parsed textblocklist")

(func textblock<-script : tb/textblock
 [script : string]
 (tb/textblock-parse<-string-delim
  script
  delimvxlisp)
 :test (test
        (tb/textblock
         :text "infinity"
         :startpos 1
         :endpos 8
         :children
          (tb/textblocklist
           (tb/textblock
           :text "infinity"
           :startpos 1
           :endpos 8
           :delim
            (delim
             :name "delimvxlisp"))))
        (textblock<-script
         "infinity"))
       (test
        (tb/textblock
         :text "(+ 2 3)"
         :startpos 1
         :endpos 7
         :children
          (tb/textblocklist
           (tb/textblock
            :text "(+ 2 3)"
            :startpos 1
            :endpos 7
            :delim
             (copy delimvxlispparen
              :delimlist
               (empty delimlist))
            :children
             (tb/textblocklist
              (tb/textblock
               :text "+"
               :startpos 2
               :endpos 2)
              (tb/textblock
               :text " "
               :startpos 3
               :endpos 3
               :delim
                (copy tb/delimwhitespace
                 :pos 0))
              (tb/textblock
               :text "2"
               :startpos 4
               :endpos 4)
              (tb/textblock
               :text " "
               :startpos 5
               :endpos 5
               :delim
                (copy tb/delimwhitespace
                 :pos 0))
              (tb/textblock
               :text "3"
               :startpos 6
               :endpos 6)))))
        (textblock<-script
         "(+ 2 3)"))
 :doc "Returns a parsed textblock from a string")

(func typefunc<-string : any
 [text : string]
 (let : any
  [pkgpos   : int        := (int<-string-findlast
                             text
                             "/")
   pkgname  : string     := (if : string
                             (= 0 pkgpos)
                             "vx/core"
                             (type/string<-string-end
                              text
                              (-1 pkgpos)))
   name     : string     := (if : string
                             (= 0 pkgpos)
                             text
                             (type/string<-string-start
                              text
                              (+1 pkgpos)))
   pkg      : package    := (package-global<-name
                             pkgname)
   typemap  : typemap    := (:typemap pkg)
   typeval  : any        := (any<-map
                             typemap
                             name)]
  (if : any
   (!-empty typeval) typeval
   (let : any
    [funcmap : funcmap := (:funcmap pkg)
     funcval : any     := (any<-map
                           funcmap
                           name)]
    (if : any
     (!-empty funcval) funcval
     (empty any)))))
 :test (test
        string
        (typefunc<-string
         "string"))
       (test
        +
        (typefunc<-string
         "+"))
 :doc "Returns a type, or func from a fully qualified name.")

/*
(func any<-repl-async : any
 [repl : repl]
 (let-async : any
  [value    : any      := (:value repl)
   repltype : any      := (:type repl)
   repllist : repllist := (:repllist repl)
   args     : anylist  := (anylist<-repllist repllist)]
  (if
   (then (!-empty value) value)
   (then (is-func repltype)
    (any-repl<-functype-args
     repltype
     args))
   (else
    (new repltype args))))
 :async
 :context
 :doc "Run an arbitrary program in the REPL.")

(func any<-script-async : any
 [text : string]
 (let-async : any
  [textblock : tb/textblock := (textblock-repl<-string text)
   repl      : repl         := (repl<-textblock textblock)]
  (any<-repl-async repl))
 :context
 :async
 :sideeffects "Since any code can be run. This is unsafe by nature."
 :doc "Run an arbitrary script asynchronously.")
*/
