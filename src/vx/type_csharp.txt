  public static Vx.Core.Type_boolean vx_boolean_from_string_ends(
    Vx.Core.Type_string text,
    Vx.Core.Type_string ends) {
    bool check = Vx.Core.vx_boolean_from_string_ends(
      text.vx_string(),
      ends.vx_string());
    Vx.Core.Type_boolean output = Core.vx_new_boolean(check);
    return output;
  }

  public static Vx.Core.Type_boolean vx_boolean_from_string_starts(
    Vx.Core.Type_string text,
    Vx.Core.Type_string starts) {
    Vx.Core.Type_boolean output = Vx.Core.e_boolean;
    bool check = Vx.Core.vx_boolean_from_string_starts(
      text.vx_string(),
      starts.vx_string()
    );
    output = Core.vx_new_boolean(check);
    return output;
  }

  // vx_int_from_string_find(string, string)
  public static int vx_int_from_string_find(String text, string find) {
    return text.IndexOf(find) + 1;
  }

  // vx_int_from_string_find(string, string)
  public static Vx.Core.Type_int vx_int_from_string_find(
    Vx.Core.Type_string text,
    Vx.Core.Type_string find) {
    int ipos = vx_int_from_string_find(text.vx_string(), find.vx_string());
    Vx.Core.Type_int output = Vx.Core.vx_new_int(ipos);
    return output;
  }

  // vx_int_from_string_findkeyword(string, string)
  public static int vx_int_from_string_findkeyword(
    string text,
    string find) {
    int output = -1;
    if (text == "") {
    } else if (find == ":nonwhitespace") {
      string wschars1 = " \n\r\t";
      int ilen = text.Length;
      for (int i = 0; i < ilen; i++) {
        char cchar = text[i];
        int pos = wschars1.IndexOf(cchar);
        if (pos < 0) {
          output = i;
          break;
        }
      }
    } else if (find == ":whitespace") {
      char[] wschars2 = {' ', '\n', '\r', '\t'};
      foreach (char cchar in wschars2) {
        int pos = text.IndexOf(cchar);
        if (pos < 0) {
        } else if (output < 0) {
          output = pos;
        } else if (pos < output) {
          output = pos;
        }
      }
    } else {
	     output = text.IndexOf(find);
		  }
    output += 1;
		  return output;
 	}

  // vx_int_from_string_findkeyword(string, string)
  public static Vx.Core.Type_int vx_int_from_string_findkeyword(
    Vx.Core.Type_string text,
    Vx.Core.Type_string find) {
    int ipos = vx_int_from_string_findkeyword(
      text.vx_string(),
      find.vx_string()
    );
    Vx.Core.Type_int output = Vx.Core.vx_new_int(ipos);
    return output;
  }
 
  // vx_int_from_string_findlast(string, string)
  public static int vx_int_from_string_findlast(
    string text,
    string findlast) {
    return text.LastIndexOf(findlast) + 1;
  }

  // vx_int_from_string_findlast(string, string)
  public static Vx.Core.Type_int vx_int_from_string_findlast(
    Vx.Core.Type_string text,
    Vx.Core.Type_string findlast) {
    int ipos = vx_int_from_string_findlast(
      text.vx_string(),
      findlast.vx_string()
    );
    Vx.Core.Type_int output = Vx.Core.vx_new_int(ipos);
    return output;
  }

  public static Vx.Core.Type_string vx_string_from_string_start_end(
    Vx.Core.Type_string text,
    Vx.Core.Type_int start,
    Vx.Core.Type_int end) {
    Vx.Core.Type_string output = Vx.Core.e_string;
    string stext = Vx.Core.vx_string_from_string_start_end(
      text.vx_string(),
      start.vx_int(),
      end.vx_int()
    );
    output = Vx.Core.vx_new_string(stext);
    return output;
  }

  // vx_string_from_stringlist_join(stringlist, string)
  public static Vx.Core.Type_string vx_string_from_stringlist_join(
    Vx.Core.Type_stringlist vals,
    Vx.Core.Type_string delim) {
    Func<Vx.Core.Type_any, string> fn = (item) => {
      Vx.Core.Type_string valstring = Vx.Core.f_any_from_any(
        Vx.Core.t_string,
        item
      );
      return valstring.vx_string();
    };
    List<string> listvalstring = Vx.Core.arraylist_from_arraylist_fn(
      vals.vx_list(),
      fn
    );
    string stext = string.Join(delim.vx_string(), listvalstring);  
    Vx.Core.Type_string output = Vx.Core.vx_new_string(stext);
    return output;
  }

  // vx_string_lowercase(string)
  public static Vx.Core.Type_string vx_string_lowercase(Vx.Core.Type_string text) {
    Vx.Core.Type_string output = Vx.Core.e_string;
    string stext = text.vx_string();
    stext = stext.ToLower();
    output = Vx.Core.vx_new_string(stext);
    return output;
  }

  // vx_string_trim(string)
  public static Vx.Core.Type_string vx_string_trim(Vx.Core.Type_string text) {
    Vx.Core.Type_string output = Vx.Core.e_string;
    string stext = text.vx_string();
    stext = stext.Trim();
    output = Vx.Core.vx_new_string(stext);
    return output;
  }

  // vx_string_uppercase(string)
  public static Vx.Core.Type_string vx_string_uppercase(
    Vx.Core.Type_string text) {
    Vx.Core.Type_string output = Vx.Core.e_string;
    string stext = text.vx_string();
    stext = stext.ToUpper();
    output = Vx.Core.vx_new_string(stext);
    return output;
  }

  public static Vx.Core.Type_stringlist vx_stringlist_from_string_split(
    Vx.Core.Type_string text,
    Vx.Core.Type_string delim) {
    Vx.Core.Type_stringlist output = Vx.Core.e_stringlist;
    string stext = text.vx_string();
    string sdelim = delim.vx_string();
    string[] delimiters = new string[] {sdelim};
    object[] arraystring = stext.Split(delimiters, System.StringSplitOptions.None);
    output = Vx.Core.vx_new(Vx.Core.t_stringlist, arraystring);
    return output;
  }
