(package vx/collection
 :libs (lib type :path vx/type)
 :doc "Collection Package")

(func - : list-1
 [listmain   : list-1
  listremove : list-1]
 (list<-list-filter : list-1
  listmain
  (fn : any
   [item : any]
   (if : any
    (then
     (!
      (contains listremove item))
     item))))
 :test (test
        (stringlist "a" "d")
        (- : stringlist
         (stringlist "a" "b" "c" "d")
         (stringlist "b" "c")))
 :alias "minus"
 :doc "Returns a list from listmain after removing listremove.")

(func - : map-1
 [mapmain   : map-1
  mapremove : map-1]
 (let : map-1
  [keysmain : stringlist :=
    (stringlist<-map mapmain)
   keysremove : stringlist :=
    (stringlist<-map mapremove)
   keysremain : stringlist :=
    (- keysmain keysremove)]
  (map<-map-keys : map-1
   mapmain keysremain))
 :test (test
        (stringmap
         :a "1"
         :d "4")
        (- : stringmap
         (stringmap
          :a "1"
          :b "2"
          :c "3"
          :d "4")
         (stringmap
          :b "x"
          :c "y")))
 :alias "minus"
 :doc "Returns a map from mapmain after removing keys from mapremove.")

(func any<-for-until-loop : any-1
 [start    : any-1
  fn-until : boolean<-any :: any-1
  fn-loop  : any<-any :: any-1 :: any-1]
 (any<-for-until-loop-max
  start
  fn-until
  fn-loop
  10000)
 :test (test
        8
        (any<-for-until-loop
         1
         (fn : boolean
          [current : int]
          (> current 6))
         (fn : int
          [current : int]
          (+ current current))))
 :doc "Returns a value using an until loop. Maximum 10000 times.")

(func any<-for-until-loop-max : any-1
 [start    : any-1
  fn-until : boolean<-any
  fn-loop  : any<-any :: any-1 :: any-1
  max      : int]
 (native
  :cpp
   "vx_core::Type_any any = vx_collection::vx_any_from_for_until_loop_max(generic_any_1, start, fn_until, fn_loop, max);
    output = vx_core::vx_any_from_any(generic_any_1, any);"
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :doc `Returns a value using a until loop.
output : any-1 := start
count : int := 0
(while continue
  continue : boolean := (count <= max)
  (if continue
    count += 1
    output = (fn-loop output)
    continue = (fn-until output)))`)

(func any<-for-while-loop : any-1
 [start    : any-1
  fn-while : boolean<-any :: any-1
  fn-loop  : any<-any :: any-1 :: any-1]
 (any<-for-while-loop-max
  start
  fn-while
  fn-loop
  1000)
 :test (test
        8
        (any<-for-while-loop
         1
         (fn : boolean
          [current : int]
          (< current 5))
         (fn : int
          [current : int]
          (+ current current))))
 :doc "Returns a value using a while loop. Maximum 1000 times.")

(func any<-for-while-loop-max : any-1
 [start    : any-1
  fn-while : boolean<-any :: any-1
  fn-loop  : any<-any :: any-1 :: any-1
  max      : int]
 (native
  :cpp
   "vx_core::Type_any any = vx_collection::vx_any_from_for_while_loop_max(generic_any_1, start, fn_while, fn_loop, max);
    output = vx_core::vx_any_from_any(generic_any_1, any);"
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :doc "Returns a value using a while loop.
       output : any-1 := start
       count : int := 0
       (while continue
        continue : boolean := (count <= max)
        (if continue
         continue = (fn-while output)
         (if continue
          count += 1
          output = (fn-loop output))))")

(func any<-map-pos : any-1
 [map : map-1
  pos : int]
 (let : any-1
  [keys : stringlist := (stringlist<-map map)
   key : string :=
    (any<-list : string
     keys pos)]
  (any<-map : any-1
   map key))
 :doc "Returns then numbered child from a map.")

(func anymap<-struct : anymap
 [structure : struct-1]
 (native
  :cpp    :auto
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :test (test
        (anymap
         :name "sname"
         :wordmap
          (stringmap
           :a "x"))
        (anymap<-struct
         (translation
          :name "sname"
          :wordmap
           (stringmap
            :a "x"))))
 :doc "Returns anymap from all the properties in a struct.")

(func boolean-write<-map-removekey : boolean
 [valuemap : map-1
  key      : string]
 (boolean-write<-map-name-value
  valuemap key (empty any))
 :sideeffects
  "Alters a mutable map. Warning: vxlisp is immutable by design, so this function can produce unexpected results."
 :doc "Returns true if it alters a mutable map false if it fails.")

(func boolean-write<-map-removekeys : boolean
 [valuemap : map-1
  keys     : stringlist]
 (let : boolean
  [writelist : booleanlist :=
    (list<-list : booleanlist
     keys
     (fn : boolean
      [key : string]
      (boolean-write<-map-removekey
       valuemap key)))]
  (and writelist))
 :sideeffects
  "Alters a mutable map. Warning: vxlisp is immutable by design, so this function can produce unexpected results."
 :doc "Returns true if it alters a mutable map false if it fails.")

(func int<-map-key : int
 [map : map-1
  key : string]
 (let : int
  [keys : stringlist := (stringlist<-map map)]
  (int<-stringlist-find
   keys key))
 :test (test
        2
        (int<-map-key
         (stringmap
          :a "x"
          :b "y")
         "b"))
 :doc "Returns the position of key in any map.")

(func int<-stringlist-find : int
 [stringlist : stringlist
  find       : string]
 (let : int
  [poslist : intlist :=
    (list<-list-intany : intlist
     stringlist
     (fn : int
      [pos   : int
       value : string]
      (if : int
       (= find value)
       pos
       0)))
   gt0list : intlist :=
    (list<-list-filter
     poslist
     (fn : int
      [item : int]
      item))]
  (first<-list : int
   gt0list))
 :test (test
        2
        (int<-stringlist-find
         (stringlist "a" "b")
         "b"))
 :doc "Returns the position (first position is 1) of find text in a stringlist.")

(func is-list : boolean
 [value : any :doc "Any value"]
 (= ":list" (extends<-any value))
 :test (test-true
        (is-list (empty stringlist)))
 :doc "Returns true if the given value is a list.")

(func is-map : boolean
 [value : any :doc "Any value"]
 (= ":map" (extends<-any value))
 :test (test-true
        (is-map (empty stringmap)))
 :doc "Returns true if the given value is a map.")

(func list<-for-end-loop : list-1
 [start   : int
  end     : int
  fn-loop : any<-int :: any-1]
 (native
  :cpp
   "vx_core::Type_any list = vx_collection::vx_list_from_for_end_loop(generic_list_1, start, end, fn_loop);
    output = vx_core::vx_any_from_any(generic_list_1, list);"
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :test (test
        (intlist 4 9)
        (list<-for-end-loop : intlist
         2
         3
         (fn
          [current : int]
          (* current current))))
 :doc `Returns a list of any-1 by iterating i from for to next where each item is (loop i).
This is similar to a for next loop in other languages.
output : list-1 := (empty list-1)
(if start <= end
 (for i=start to end
  value : any-1 := (fn-loop i)
  output += value)
 (else
  (for i=start to end; i--
   value : any-1 := (fn-loop i)
   output += value)
 ))`)

(func list<-for-while-loop : list-1
 [start    : any-1
  fn-while : boolean<-any
  fn-loop  : any<-any :: any-1 :: any-1]
 (list<-for-while-loop-max start fn-while fn-loop 1000)
/*
 :test (test
        (intlist 1 2)
        (list<-for-while-loop : intlist
         1
         (fn : boolean
          [current : int]
          (< current 3))
         (fn
          [current : int]
          (+1 current))))
*/
 :doc "Returns a list of any-1 using a while loop. Max: 1000")

(func list<-for-while-loop-max : list-1
 [start    : any-1
  fn-while : boolean<-any
  fn-loop  : any<-any :: any-1 :: any-1
  max      : int]
 (native
  :cpp
   "vx_core::Type_any list = vx_collection::vx_list_from_for_while_loop_max(generic_list_1, start, fn_while, fn_loop, max);
    output = vx_core::vx_any_from_any(generic_list_1, list);"
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :doc `Returns a list of any-1 using a while loop.
1. output : list-1 := (empty list-1)
2. value : any-1 := start.
3. value : any-1 := (fn-loop value).
4. check : boolean := (fn-while value).
5. if (= check true) output := (copy output value), Go to 3 (Maximum max times).
6. else end.`)

(func list<-list-end : list-1
 [values : list-1
  end    : int]
 (list<-list-start-end
  values 1 end)
 :test (test
        (stringlist
         "a" "b" "c")
        (list<-list-end
         (stringlist
          "a" "b" "c" "d")
         3))
 :doc "Returns a sub list from positions 1 to end inclusive.")

(func list<-list-filter : list-1
 [vallist   : list-2
  fn-filter : any<-any]
 (native
  :cpp
   "vx_core::Type_any list = vx_collection::vx_list_from_list_filter(generic_list_1, vallist, fn_filter);
    output = vx_core::vx_any_from_any(generic_list_1, list);"
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :test (test
        (stringlist
         "a1" "b1" "c1" "d1")
        (list<-list-filter : stringlist
         (list
          "a" 4 "b" (list) "c" (map) "d")
         (fn : string
          [value : any]
          (if
           (then
            (is-string value)
            (string value "1"))))))
 :doc "Filter List to only include non-empty values")

(func list<-list-filtertypes : list-1
 [vallist     : list-2
  filtertypes : typelist :...]
 (list<-list-filter
  vallist
  (fn : any
   [value : any]
   (if
    (is-type<-any-typelist
     value filtertypes)
    value)))
 :test (test
        (list
         "a" 1 "b" "c")
        (list<-list-filtertypes : list
         (list
          "a" 1 "b" "c" 4.5)
         string int))
 :doc "Filter List to only include matching types")

(func list<-list-flatten : list-1
 [listsrc : list-2
  fn-any<-any : any<-any]
 (let : list-1
  [listany : anylist :=
   (list<-list : list-1
    listsrc
    fn-any<-any)]
  (new : list-1
   listany))
 :test (test
        (stringlist "a" "b" "c")
        (list<-list-flatten : stringlist
         (intlist 1 2)
         (fn : stringlist
          [index : int]
          (switch : stringlist
           index
           (case 1
            (stringlist "a" "b"))
           (case 2
            (stringlist "c"))))))
 :doc "Return a list of items from another list. fn-any<-any may return individual items or lists of items. Any sublists are flattened into the single list.")

(func list<-list-join : list-1
 [values : list-2]
 (list<-list-join : list-1
  values
  (fn : any
   [value : any]
   value))
 :test (test
        (stringlist "a" "b" "c" "d")
        (list<-list-join : stringlist
         (stringlistlist
          (stringlist "a" "b")
          (stringlist "c" "d"))))
 :doc "Returns a list by joining the valid values in each value list")

(func list<-list-join : list-1
 [values      : list-2
  fn-any<-any : any<-any]
 (native
  :cpp
   "vx_core::Type_any list = vx_core::vx_list_join_from_list_fn(
      generic_list_1,
      values,
      fn_any_from_any
    );
    output = vx_core::vx_any_from_any(
      generic_list_1,
      list
    );"
  :csharp :auto
  :java
   "List<Core.Type_any> list_value = values.vx_list();
    List<Core.Type_any> list_result = new ArrayList<>();
    for (Core.Type_any val : list_value) {
      Core.Type_any listoflist = fn_any_from_any.vx_any_from_any(
        generic_list_1, val
      );
      if (listoflist instanceof Core.Type_list) {
        Core.Type_list vallist = (Core.Type_list)listoflist;
        List<Core.Type_any> listval = vallist.vx_list();
        list_result.addAll(listval);
      }
    }
    output = Core.f_any_from_any(
      generic_list_1,
      generic_list_1.vx_new(list_result)
    );"
  :js
   "const fn = fn_any_from_any['vx_value']
    if (fn) {
      const listoflist = values.map(fn)
      output = listoflist.flat()
      output['vx_type'] = generic_list_1
    }"
  :kotlin :auto)
 :test (test
        (stringlist "a" "b" "c" "d")
        (list<-list-join : stringlist
         (stringlistlist
          (stringlist "a" "b")
          (stringlist "c" "d"))
         (fn : stringlist
          [values : stringlist]
          values)))
 :doc "Returns a flattened list of processed items from another list")

(func list<-list-start : list-1
 [values : list-1
  start  : int]
 (list<-list-start-end
  values start (length values))
 :test (test
        (stringlist
         "b" "c" "d")
        (list<-list-start
         (stringlist
          "a" "b" "c" "d")
         2))
 :doc "Returns a sub list from start to list end.")

(func list<-list-start-end : list-1
 [values : list-1
  start  : int
  end    : int]
 (native
  :cpp
   "vx_core::Type_any any = vx_collection::vx_list_from_list_start_end(generic_list_1, values, start, end);
    output = vx_core::vx_any_from_any(generic_list_1, any);"
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :test (test
        (stringlist
         "b" "c")
        (list<-list-start-end
         (stringlist
          "a" "b" "c" "d")
         2 3))
 :doc "Returns a sublist from another list")

(func map<-map-end : map-1
 [valuemap : map-1
  end      : int]
 (map<-map-start-end
  valuemap 1 end)
 :test (test
        (stringmap
         :b "1"
         :a "2")
        (map<-map-end
         (stringmap
          :b "1"
          :a "2"
          :c "3")
         2))
 :doc "Returns a submap from key positions 1 to end inclusive.")

(func map<-map-keys : map-1
 [valuemap : map-1
  keys     : stringlist]
 (native
  :cpp    :auto
  :csharp :auto
  :java   :auto
  :js     :auto
  :kotlin :auto)
 :test (test
        (stringmap
         :c "3"
         :a "1")
        (map<-map-keys
         (stringmap
          :a "1"
          :b "2"
          :c "3")
         (stringlist
          "c" "a")))
 :doc "Returns a submap from another map using a keylist")

(func map<-map-start : map-1
 [valuemap : map-1
  start    : int]
 (map<-map-start-end
  valuemap start (length valuemap))
 :test (test
        (stringmap
         :a "2"
         :c "3")
        (map<-map-start
         (stringmap
          :b "1"
          :a "2"
          :c "3")
         2))
 :doc "Returns a sub map from start to map end.")

(func map<-map-start-end : map-1
 [valuemap : map-1
  start    : int
  end      : int]
 (let : map-1
  [keys1 : stringlist :=
    (stringlist<-map valuemap)
   keys2 : stringlist :=
    (list<-list-start-end : stringlist
     keys1 start end)]
  (map<-map-keys : map-1
   valuemap keys2))
 :test (test
        (stringmap
         :a "2"
         :c "3")
        (map<-map-start-end
         (stringmap
          :b "1"
          :a "2"
          :c "3"
          :d "4")
         2 3))
 :doc "Returns a submap from another map using the index of the keylist")

(func map<-struct : map-1
 [structure : struct-2]
 (let : map-1
  [anymap : anymap :=
    (anymap<-struct structure)]
  (map<-map : map-1
   anymap))
 :test (test
        (stringmap
         :name "sname")
        (map<-struct : stringmap
         (translation
          :name "sname"
          :wordmap
           (stringmap
            :a "x"))))
 :doc "Returns a typed map from all the properties in a struct.")
