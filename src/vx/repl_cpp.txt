// :headerfirst
// :headertype
// :headerfunc
// :header

  // vx_string_from_listarg(context, type, liststring)
  std::string vx_string_from_listarg(vx_core::Type_context context, vx_core::Type_any type, std::vector<std::string> listarg);

// :body

  // vx_string_from_listarg(context, type, liststring)
  std::string vx_string_from_listarg(vx_core::Type_context context, vx_core::Type_any type, std::vector<std::string> listarg) {
    std::string output = "";
    std::vector<vx_core::Type_any> listrepl;
    bool isfirst = true;
    for (std::string sarg : listarg) {
      if (isfirst) {
        isfirst = false;
      } else {
        vx_core::Type_any replval;
        if (vx_core::vx_is_int(sarg)) {
          replval = vx_core::vx_new_int(vx_core::vx_int_from_string(sarg));
        } else if (vx_core::vx_is_float(sarg)) {
          replval = vx_core::vx_new_float(vx_core::vx_float_from_string(sarg));
        } else {
          replval = vx_core::vx_new_string(sarg);
        }
        vx_repl::Type_repl argrepl = vx_core::vx_new(vx_repl::t_repl, {
          vx_core::vx_new_string(":val"), replval
        });
        listrepl.push_back(argrepl);
      }
    }
    vx_repl::Type_repl repl = vx_core::vx_new(vx_repl::t_repl, {
      vx_core::vx_new_string(":type"), type,
      vx_core::vx_new_string(":repllist"), vx_core::vx_new(vx_repl::t_repllist, listrepl)
    });
    vx_core::Type_any any = vx_repl::f_any_from_repl(context, repl);
    vx_core::Type_any anytype = any->vx_type();
    if (anytype == vx_core::t_string) {
      vx_core::Type_string text = vx_core::vx_any_from_any(vx_core::t_string, any);
      output = text->vx_string();
    } else {
      output = vx_core::vx_string_from_any(any);
    }
    vx_core::vx_release(any);
    return output;
  }
