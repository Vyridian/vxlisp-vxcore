// :headerfirst
// :headertype
// :headerfunc
// :header

  // vx_int_from_string_find(string, string)
  int vx_int_from_string_find(std::string text, std::string find);

  // vx_int_from_string_find(string, string)
  vx_core::Type_int vx_int_from_string_find(vx_core::Type_string text, vx_core::Type_string find);

  // vx_int_from_string_findkeyword(string, string)
  int vx_int_from_string_findkeyword(std::string text, std::string find);

  // vx_int_from_string_findkeyword(string, string)
  vx_core::Type_int vx_int_from_string_findkeyword(vx_core::Type_string text, vx_core::Type_string find);

  // vx_int_from_string_findlast(string, string)
  int vx_int_from_string_findlast(std::string text, std::string find);

  // vx_int_from_string_findlast(string, string)
  vx_core::Type_int vx_int_from_string_findlast(vx_core::Type_string text, vx_core::Type_string findlast);

  // vx_string_from_stringlist_join(stringlist, string)
  vx_core::Type_string vx_string_from_stringlist_join(vx_core::Type_stringlist vals, vx_core::Type_string delim);

  // vx_string_lowercase(string)
  vx_core::Type_string vx_string_lowercase(vx_core::Type_string text);

  // vx_string_trim(string)
  vx_core::Type_string vx_string_trim(vx_core::Type_string text);

  // vx_string_uppercase(string)
  vx_core::Type_string vx_string_uppercase(vx_core::Type_string text);

  // vx_stringlist_from_string_split(string, string)
  vx_core::Type_stringlist vx_stringlist_from_string_split(vx_core::Type_string text, vx_core::Type_string delim);

// :body

  // vx_int_from_string_find(string, string)
  int vx_int_from_string_find(std::string text, std::string find) {
    size_t pos = text.find(find);
    int output = vx_core::vx_int_from_sizet(pos) + 1;
    return output;
  }

  // vx_int_from_string_find(string, string)
  vx_core::Type_int vx_int_from_string_find(vx_core::Type_string text, vx_core::Type_string find) {
    int ipos = vx_type::vx_int_from_string_find(text->vx_string(), find->vx_string());
    vx_core::Type_int output = vx_core::vx_new_int(ipos);
    return output;
  }

  // vx_int_from_string_findkeyword(string, string)
  int vx_int_from_string_findkeyword(std::string text, std::string find) {
    int output = -1;
    if (text == "") {
    } else if (find == ":nonwhitespace") {
      std::string wschars1 = " \n\r\t";
      int ilen = text.length();
      for (int i = 0; i < ilen; i++) {
        char cchar = text[i];
        int pos = vx_core::vx_int_from_sizet(wschars1.find(cchar));
        if (pos < 0) {
          output = i;
          break;
        }
      }
    } else if (find == ":whitespace") {
      std::string wschars2 = " \n\r\t";
      for (char cchar : wschars2) {
        int pos = vx_core::vx_int_from_sizet(text.find(cchar));
        if (pos < 0) {
        } else if (output < 0) {
         output = pos;
        } else if (pos < output) {
         output = pos;
        }
      }
    } else {
      output = text.find(find);
    }
    output += 1;
    return output;
  }

  // vx_int_from_string_findkeyword(string, string)
  vx_core::Type_int vx_int_from_string_findkeyword(vx_core::Type_string text, vx_core::Type_string find) {
    int ipos = vx_type::vx_int_from_string_findkeyword(text->vx_string(), find->vx_string());
    vx_core::Type_int output = vx_core::vx_new_int(ipos);
    return output;
  }

  // vx_int_from_string_findlast(string, string)
  int vx_int_from_string_findlast(std::string text, std::string find) {
    size_t pos = text.rfind(find);
    int output = vx_core::vx_int_from_sizet(pos) + 1;
    return output;
  }

  // vx_int_from_string_findlast(string, string)
  vx_core::Type_int vx_int_from_string_findlast(vx_core::Type_string text, vx_core::Type_string findlast) {
    int ipos = vx_type::vx_int_from_string_findlast(text->vx_string(), findlast->vx_string());
    vx_core::Type_int output = vx_core::vx_new_int(ipos);
    return output;
  }

  // vx_string_from_stringlist_join(stringlist, string)
  vx_core::Type_string vx_string_from_stringlist_join(vx_core::Type_stringlist vals, vx_core::Type_string delim) {
    bool isfirst = true;
    std::string str = "";
    std::string sdelim = delim->vx_string();
    for (vx_core::Type_string substr : vals->vx_p_list) {
      std::string ssub = substr->vx_string();
      if (isfirst) {
        str = ssub;
      } else {
        str += sdelim + ssub;
      }
      isfirst = false;
    }
    vx_core::Type_string output = vx_core::vx_new_string(str);
    return output;
 	}

  // vx_string_lowercase(string)
  vx_core::Type_string vx_string_lowercase(vx_core::Type_string text) {
    std::string stext = text->vx_string();
    stext = stext.substr(0, sizeof stext);
    std::transform(stext.begin(), stext.end(), stext.begin(), ::tolower);
    vx_core::Type_string output = vx_core::vx_new_string(stext);
    return output;
  }

  // vx_string_trim(string)
  vx_core::Type_string vx_string_trim(vx_core::Type_string text) {
    std::string_view stext = text->vx_string();
    stext = stext.substr(0, sizeof stext);
    stext.remove_prefix(std::min(stext.find_first_not_of(" \t\r\v\n"), stext.size()));
    stext.remove_suffix(std::min(stext.size() - stext.find_last_not_of(" \t\r\v\n") - 1, stext.size()));
    vx_core::Type_string output = vx_core::vx_new_string(static_cast<std::string>(stext));
    return output;
  }

  // vx_string_uppercase(string)
  vx_core::Type_string vx_string_uppercase(vx_core::Type_string text) {
    std::string stext = text->vx_string();
    stext = stext.substr(0, sizeof stext);
    std::transform(stext.begin(), stext.end(), stext.begin(), ::toupper);
    vx_core::Type_string output = vx_core::vx_new_string(stext);
    return output;
  }

  // vx_stringlist_from_string_split(string, string)
  vx_core::Type_stringlist vx_stringlist_from_string_split(vx_core::Type_string text, vx_core::Type_string delim) {
    std::string stext = text->vx_string();
    std::string sdelim = delim->vx_string();
    vx_core::vx_Type_listany listany;
    size_t pos = 0;
    std::string stoken;
    while ((pos = stext.find(sdelim)) != std::string::npos) {
      stoken = stext.substr(0, pos);
      vx_core::Type_string token = vx_core::vx_new_string(stoken);
      listany.push_back(token);
      stext.erase(0, pos + sdelim.length());
    }
    vx_core::Type_string token = vx_core::vx_new_string(stext);
    listany.push_back(token);
    vx_core::Type_stringlist output = vx_core::vx_new(vx_core::t_stringlist, listany);
    vx_core::vx_release({text, delim});
    return output;
  }
